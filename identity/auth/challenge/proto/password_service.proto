syntax = "proto2";

package identity_auth_challenge;

import "gaia/insclient/ins_clientinfo.proto";
import "identity/backend/common/legacy/recorded_rpc.proto";
import "identity/gaia/storage_access/change_notification/change_notification_options.proto";
import "net/compass/proto/routing_annotations.proto";
import "net/proto2/bridge/proto/message_set.proto";
import "storage/datapol/annotations/proto/semantic_annotations.proto";

option java_multiple_files = true;
option java_package = "com.google.identity.auth.challenge.proto";

service PasswordService {
    rpc GetAccessCodes(GetAccessCodesRequest) returns (GetAccessCodesResponse);
    rpc CreateAccessCode(CreateAccessCodeRequest) returns (CreateAccessCodeResponse);
    rpc RemoveAccessCode(RemoveAccessCodeRequest) returns (RemoveAccessCodeResponse);
    rpc HashAndEncryptPassword(HashAndEncryptPasswordRequest) returns (HashAndEncryptPasswordResponse);
    rpc ForgotPassword(ForgotPasswordRequest) returns (ForgotPasswordResponse);
    rpc ExercisePasswordCapability(ExercisePasswordCapabilityRequest) returns (ExercisePasswordCapabilityResponse);
    rpc VerifyPassword(VerifyPasswordRequest) returns (VerifyPasswordResponse);
    rpc ListClientEncryptionPublicKeys(ListClientEncryptionPublicKeysRequest) returns (ListClientEncryptionPublicKeysResponse);
    rpc ClearClientEncryptionKey(ClearClientEncryptionKeyRequest) returns (ClearClientEncryptionKeyResponse);
    rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse);
}

message AccessCodeInfo {
    optional int32 code_id = 1;
    optional string name = 3;
    optional int64 creation_time = 4;
    optional int64 last_time_used = 5;
}

message GetAccessCodesRequest {
    optional int64 user_id = 1;
    optional bool lag_ok = 2;
    
    extensions 1000 to max;
    
    reserved 100, 101;
}

message GetAccessCodesResponse {
    repeated AccessCodeInfo access_code_info = 2;
    optional int32 next_access_code_id = 3;
    optional int64 modification_timestamp_micros = 4;
    
    reserved 1, 99;
}

message CreateAccessCodeRequest {
    optional int64 user_id = 1;
    optional string name = 2;
    optional gaia_storage_access.ChangeNotificationOptions change_notification_options = 4;
    optional identity_backend.legacy.RecordedRpcSequence recorded_rpc_sequence = 102;
    
    extensions 1000 to max;
    
    reserved 3, 100, 101;
}

message CreateAccessCodeResponse {
    optional AccessCodeInfo access_code_info = 2;
    optional string access_code = 3;
    
    reserved 1, 99;
}

message RemoveAccessCodeRequest {
    optional int64 user_id = 1;
    optional int32 code_id = 2;
    optional bool remove_all = 3;
    optional gaia_storage_access.ChangeNotificationOptions change_notification_options = 5;
    optional identity_backend.legacy.RecordedRpcSequence recorded_rpc_sequence = 102;
    
    extensions 1000 to max;
    
    reserved 4, 100, 101;
}

message RemoveAccessCodeResponse {
    reserved 1, 99;
}

message HashAndEncryptPasswordRequest {
    optional bytes password = 1;
    
    extensions 1000 to max;
    
    reserved 100, 101;
}

message HashAndEncryptPasswordResponse {
    optional bytes encrypted_hash = 2;
    
    reserved 1, 99;
}

message VerifyPasswordRequest {
    optional int64 user_id = 1;
    optional bytes password = 2;
    optional bool ignore_first_password_character_case = 3;
    optional bool allow_access_codes = 4;
    optional bytes issue_context = 5;
    optional bool get_client_encryption_key = 6;
    optional bool disable_strong_lookups = 7;
    optional identity_backend.legacy.RecordedRpcSequence recorded_rpc_sequence = 102;
    
    extensions 387882037;
    
    reserved 100, 101;
}

message VerifyPasswordResponse {
    optional int32 access_code_id = 2;
    optional ClientEncryptionKey client_encryption_key = 4;
    optional bytes unstored_client_encryption_key_data = 5;
    optional bool client_encryption_key_generated_with_securebox_cpp = 6;
    
    reserved 1, 3, 99;
}

message VerifyPasswordFailureExtension {
    optional int32 access_code_id = 1;
    
    extend .proto2.bridge.MessageSet {
        optional VerifyPasswordFailureExtension message_set_extension = 388317507;
    }
}

message ChangePasswordRequest {
    optional int64 user_id = 1;
    optional bytes new_password = 3;
    optional PasswordType password_type = 17;
    optional GaiaNotificationSettings notification_settings = 6;
    optional bool generate_cookies = 7;
    optional string dusi = 12;
    optional bool reject_no_op_change = 8;
    repeated string whitelisted_device_sessions = 11;
    optional bool changed_by_password_unsetting_pipeline = 14;
    optional bool create_client_encryption_key = 15;
    optional bool can_handle_third_party_cookies = 13;
    optional bool can_handle_first_party_cookies = 16;
    optional gaia_storage_access.ChangeNotificationOptions change_notification_options = 18;
    optional identity_backend.legacy.RecordedRpcSequence recorded_rpc_sequence = 102;
    
    extensions 505811048;
    
    reserved 2, 4, 5, 9, 100, 101;
}

message ChangePasswordResponse {
    optional string session_cookie = 3;
    optional string session_cookie_third_party = 5;
    optional string session_cookie_first_party = 8;
    optional string lsid_cookie = 4;
    optional string lsid_cookie_third_party = 6;
    optional string lsid_cookie_first_party = 9;
    optional ClientEncryptionKey client_encryption_key = 7;
    
    reserved 1, 2, 99;
}

message ClientEncryptionKey {
    optional EncryptionKeyType key_type = 1;
    enum EncryptionKeyType {
        KEY_TYPE_UNSPECIFIED = 0;
        P256_KEY_PAIR = 1;
    }
    
    optional bytes public_key = 2;
    optional bytes private_key = 3;
}

message ForgotPasswordRequest {
    optional string email = 1;
    optional string recovery_email = 3;
    optional string redirect_url = 2;
    optional int64 expiration_time_seconds = 4;
    optional gaia_storage_access.ChangeNotificationOptions change_notification_options = 5;
    optional identity_backend.legacy.RecordedRpcSequence recorded_rpc_sequence = 102;
    
    extensions 1000 to max;
    
    reserved 100, 101;
}

message ForgotPasswordResponse {
    optional int64 capability_id = 4;
    optional string capability_string = 3;
    
    reserved 1, 2, 99;
}

message ExercisePasswordCapabilityRequest {
    optional string capability_string = 3;
    optional bytes new_password = 2;
    optional GaiaNotificationSettings notification_settings = 4;
    optional bool reject_no_op_change = 5;
    optional bool create_client_encryption_key = 6;
    optional gaia_storage_access.ChangeNotificationOptions change_notification_options = 7;
    optional identity_backend.legacy.RecordedRpcSequence recorded_rpc_sequence = 102;
    
    extensions 1000 to max;
    
    reserved 1, 100, 101;
}

message ExercisePasswordCapabilityResponse {
    optional ClientEncryptionKey client_encryption_key = 5;
    
    reserved 1, 2, 3, 4, 99;
}

message ListClientEncryptionPublicKeysRequest {
    optional int64 user_id = 1;
}

message ListClientEncryptionPublicKeysResponse {
    optional ClientEncryptionPublicKey current_key = 1;
    message ClientEncryptionPublicKey {
        optional ClientEncryptionKey.EncryptionKeyType key_type = 1;
        optional bytes public_key = 2;
    }
}

message ClearClientEncryptionKeyRequest {
    optional int64 user_id = 1;
    optional bytes public_key = 2;
}

message ClearClientEncryptionKeyResponse {
    
}

enum PasswordType {
    PASSWORD_TYPE_UNSPECIFIED = 0;
    PASSWORD_TYPE_PLAINTEXT = 1;
    PASSWORD_TYPE_HASHED = 2;
    PASSWORD_TYPE_HASHED_AND_ENCRYPTED = 3;
}
