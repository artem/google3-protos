syntax = "proto2";

package rpc;

import public "net/rpc/serverstatus-perf.proto";
import "net/rpc/descriptor.proto";
import "net/rpc/empty-message.proto";
import "net/rpc/servicedescriptor.proto";
import "stats/io/proto/expvar.proto";
import "stats/request/statsrequest.proto";

option java_package = "com.google.net.rpc.proto";

service ServerStatus {
    rpc GetExportedVariables(EmptyMessage) returns (EV_KeyValueList);
    rpc GetNamedVariables(VarzRequest) returns (EV_KeyValueList);
    rpc GetFlags(FlagsRequest) returns (EV_KeyValueList);
    rpc SetFlag(FlagRequest) returns (FlagResponse);
    rpc GetServices(EmptyMessage) returns (ServiceList);
    rpc GetFileByName(FileNameRequest) returns (FileDescriptorProtoResponse);
    rpc GetFileContainingSymbol(SymbolRequest) returns (FileDescriptorProtoResponse);
    rpc GetFileContainingExtension(ExtensionRequest) returns (FileDescriptorProtoResponse);
    rpc GetAllExtensionNumbers(TypeRequest) returns (ExtensionNumbersResponse);
    rpc GetFileDescriptorSetForFileName(FileNameRequest) returns (FileDescriptorSetResponse);
    rpc GetFileDescriptorSetForSymbol(SymbolRequest) returns (FileDescriptorSetResponse);
    rpc GetFileDescriptorSetForAllExtensions(TypeRequest) returns (FileDescriptorSetResponse);
    rpc GetFileDescriptorSetForExtensions(ExtensionBatchRequest) returns (FileDescriptorSetResponse);
    rpc GetPerf(PerfRequest) returns (PerfResponse);
    rpc GetLatencyHistograms(LatencyHistogramsRequest) returns (LatencyHistogramsResponse);
    rpc GetRequestz(statsrequest.GetRequestzRequest) returns (statsrequest.GetRequestzResponse);
}

message ServiceList {
    option no_standard_descriptor_accessor = true;
    
    repeated group Service = 1 {
        option no_standard_descriptor_accessor = true;
        required string name = 2;
        required RPC_ServiceDescriptor descriptor = 3;
    }
}

message TypeRequest {
    optional string type = 1;
}

message SymbolRequest {
    optional string symbol = 1;
}

message ExtensionRequest {
    optional string containing_type = 1;
    optional int32 extension_number = 2;
}

message ExtensionBatchRequest {
    repeated ExtensionRequest extension_request = 1;
}

message FileNameRequest {
    optional string filename = 1;
}

message ExtensionNumbersResponse {
    repeated int32 extension_number = 1;
}

message VarzRequest {
    repeated string var = 1;
}

message FlagsRequest {
    repeated string flag = 1;
}

message LatencyHistogramsRequest {
    optional TYPE type = 1 [default = ALL];
    enum TYPE {
        ALL = 0;
    }
}

message LatencyHistogramsResponse {
    repeated statsrequest.LatencyHistogramsForFamily family = 1;
}

message FlagRequest {
    optional EV_KeyValuePair flag = 1;
}

message FlagResponse {
    
}
