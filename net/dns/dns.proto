syntax = "proto2";

package net_dns;

import "storage/datapol/annotations/proto/semantic_annotations.proto";

option cc_enable_arenas = true;
option java_outer_classname = "Protocol";
option java_package = "com.google.net.dns";

message RRSet {
    required string name = 1;
    required uint32 type = 2;
    required uint32 rrclass = 3;
    required uint32 ttl = 4;
    repeated AEntry a = 8;
    repeated NSEntry ns = 9;
    repeated CNAMEEntry cname = 10;
    repeated SOAEntry soa = 11;
    repeated PTREntry ptr = 12;
    repeated MXEntry mx = 13;
    repeated TXTEntry txt = 14;
    repeated AAAAEntry aaaa = 15;
    repeated OpaqueEntry opaque = 16;
    repeated OpaqueEntry null = 17;
    repeated HINFOEntry hinfo = 18;
    repeated MINFOEntry minfo = 19;
    repeated RPEntry rp = 20;
    repeated SRVEntry srv = 21;
    repeated NAPTREntry naptr = 22;
    repeated DSEntry ds = 23;
    repeated RRSIGEntry rrsig = 24;
    repeated DNSKEYEntry dnskey = 25;
    repeated NSEC3Entry nsec3 = 26;
    repeated NSECEntry nsec = 27;
    repeated DNAMEEntry dname = 28;
    repeated CAAEntry caa = 29;
    repeated NSEC3PARAMEntry nsec3param = 30;
    repeated SPFEntry spf = 31;
    repeated CDSEntry cds = 32;
    repeated IPSECKEYEntry ipseckey = 33;
    repeated SSHFPEntry sshfp = 34;
    repeated TLSAEntry tlsa = 35;
    repeated INTEGRITYEntry integrity = 36;
    repeated SVCBEntry svcb = 37;
    repeated SVCBEntry https = 38;
    repeated CDNSKEYEntry cdnskey = 39;
}

message OpaqueEntry {
    required bytes data = 1;
}

message AEntry {
    required bytes ip = 1;
}

message NSEntry {
    required string host = 1;
}

message CNAMEEntry {
    required string host = 1;
}

message SOAEntry {
    required string host = 1;
    required string responsibleMailbox = 2;
    required uint32 soaSerial = 3;
    required uint32 soaRefresh = 4;
    required uint32 soaRetry = 5;
    required uint32 soaExpire = 6;
    required uint32 soaTTL = 7;
}

message PTREntry {
    required string ptr = 1;
}

message HINFOEntry {
    required string cpu = 1;
    required string os = 2;
}

message MINFOEntry {
    required string mailbox = 1;
    required string responsibleMailbox = 2;
}

message MXEntry {
    required uint32 preference = 1;
    required string host = 2;
}

message TXTEntry {
    repeated string text = 1;
}

message RPEntry {
    required string responsibleMailbox = 1;
    required string txtDomain = 2;
}

message AAAAEntry {
    required bytes ip = 6;
}

message SRVEntry {
    required uint32 priority = 1;
    required uint32 weight = 2;
    required uint32 port = 3;
    required string target = 4;
}

message NAPTREntry {
    required uint32 order = 1;
    required uint32 preference = 2;
    required string flags = 3;
    required string service = 4;
    required string regexp = 5;
    required string replacement = 6;
}

message DSEntry {
    required uint32 keytag = 1;
    required uint32 algorithm = 2;
    required uint32 digesttype = 3;
    required bytes digest = 4;
}

message CDSEntry {
    required uint32 keytag = 1;
    required uint32 algorithm = 2;
    required uint32 digesttype = 3;
    required bytes digest = 4;
}

message RRSIGEntry {
    required uint32 typecovered = 1;
    required uint32 algorithm = 2;
    required uint32 labels = 3;
    required uint32 originalttl = 4;
    required uint32 expiration = 5;
    required uint32 inception = 6;
    required uint32 keytag = 7;
    required string signersname = 8;
    required bytes signature = 9;
}

message NSECEntry {
    required string next = 1;
    repeated uint32 types = 2;
}

message CAAEntry {
    required int32 flags = 1;
    required string property = 2;
    required string value = 3;
}

message DNSKEYEntry {
    required uint32 flags = 1;
    required uint32 protocol = 2;
    required uint32 algorithm = 3;
    optional bytes exponent = 4;
    optional bytes modulus = 5;
    optional bytes otherkey = 6;
}

message CDNSKEYEntry {
    optional uint32 flags = 1;
    optional uint32 protocol = 2;
    optional uint32 algorithm = 3;
    optional bytes exponent = 4;
    optional bytes modulus = 5;
    optional bytes otherkey = 6;
}

message NSEC3Entry {
    required uint32 algorithm = 1;
    required uint32 flags = 2;
    required uint32 iterations = 3;
    required bytes salt = 4;
    required bytes next = 5;
    repeated uint32 types = 6;
}

message NSEC3PARAMEntry {
    required uint32 algorithm = 1;
    required uint32 flags = 2;
    required uint32 iterations = 3;
    required bytes salt = 4;
}

message SPFEntry {
    repeated string value = 1;
}

message DNAMEEntry {
    required string target = 1;
}

message IPSECKEYEntry {
    optional uint32 precedence = 1;
    optional uint32 gateway_type = 2;
    optional uint32 algorithm = 3;
    optional bytes gateway = 4;
    optional bytes public_key = 5;
}

message SSHFPEntry {
    optional uint32 algorithm = 1;
    optional uint32 fingerprint_type = 2;
    optional bytes fingerprint = 3;
}

message TLSAEntry {
    optional uint32 certificate_usage = 1;
    optional uint32 selector = 2;
    optional uint32 matching_type = 3;
    optional bytes certificate_association_data = 4;
}

message SVCBEntry {
    optional uint32 priority = 1;
    optional string target = 2;
    map<uint32, bytes> params = 3;
}

message TSIGEntry {
    required string algorithm = 1;
    required uint64 time_signed = 2;
    required uint32 time_fudge = 3;
    required bytes mac = 4;
    required uint32 orig_msgid = 5;
    required uint32 tsig_error = 6;
    required bytes other_data = 7;
}

message OPTEntry {
    required uint32 edns_max_payload = 1;
    required uint32 edns_rcode = 2;
    required uint32 edns_version = 3;
    required uint32 edns_flags = 4;
    repeated EDNSOptionEntry edns_option = 5;
}

message EDNSOptionEntry {
    required uint32 code = 1;
    required bytes payload = 2;
    optional EDNSClientSubnetEntry client_subnet = 3;
}

message EDNSClientSubnetEntry {
    required uint32 source_netmask = 1;
    required uint32 scope_netmask = 2;
    required bytes address = 3;
}

message INTEGRITYEntry {
    required bytes nonce = 1;
    required bytes digest = 2;
}

message Question {
    required string name = 1;
    required uint32 type = 2;
    required uint32 qclass = 3;
}

message DNSQuery {
    required Question question = 1;
    optional OPTEntry edns_option = 2;
    optional bool cd = 3;
    optional bool rd = 4;
    optional bool ad = 5;
}

message DNSResponse {
    optional Question question = 1;
    required bool aa = 2;
    required uint32 response_code = 3;
    repeated RRSet answer = 4;
    repeated RRSet authority = 5;
    repeated RRSet additional = 6;
    optional OPTEntry edns_option = 7;
    optional bool tc = 8;
    optional bool rd = 9;
    optional bool ra = 10;
    optional bool ad = 11;
    optional bool cd = 12;
}
