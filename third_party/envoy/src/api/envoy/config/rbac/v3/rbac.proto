syntax = "proto3";

package envoy.config.rbac.v3;

import "third_party/envoy/src/api/envoy/config/core/v3/address.proto";
import "third_party/envoy/src/api/envoy/config/core/v3/extension.proto";
import "third_party/envoy/src/api/envoy/config/route/v3/route_components.proto";
import "third_party/envoy/src/api/envoy/type/matcher/v3/filter_state.proto";
import "third_party/envoy/src/api/envoy/type/matcher/v3/metadata.proto";
import "third_party/envoy/src/api/envoy/type/matcher/v3/path.proto";
import "third_party/envoy/src/api/envoy/type/matcher/v3/string.proto";
import "third_party/envoy/src/api/envoy/type/v3/range.proto";
import "google/api/expr/checked.proto";
import "google/api/expr/syntax.proto";
import "third_party/envoy/src/api/envoy/annotations/deprecation.proto";
import "third_party/udpa/udpa/annotations/migrate.proto";
import "third_party/udpa/udpa/annotations/status.proto";
import "third_party/udpa/udpa/annotations/versioning.proto";
import "third_party/protoc_gen_validate/validate/validate.proto";

option go_package = "github.com/envoyproxy/go-control-plane/envoy/config/rbac/v3;rbacv3";
option java_multiple_files = true;
option java_outer_classname = "RbacProto";
option java_package = "io.envoyproxy.envoy.config.rbac.v3";

message RBAC {
    Action action = 1;
    enum Action {
        ALLOW = 0;
        DENY = 1;
        LOG = 2;
    }
    
    map<string, Policy> policies = 2;
    
    AuditLoggingOptions audit_logging_options = 3;
    message AuditLoggingOptions {
        AuditCondition audit_condition = 1;
        enum AuditCondition {
            NONE = 0;
            ON_DENY = 1;
            ON_ALLOW = 2;
            ON_DENY_AND_ALLOW = 3;
        }
        
        repeated AuditLoggerConfig logger_configs = 2;
        message AuditLoggerConfig {
            .envoy.config.core.v3.TypedExtensionConfig audit_logger = 1;
            bool is_optional = 2;
        }
    }
}

message Policy {
    repeated Permission permissions = 1;
    repeated Principal principals = 2;
    google.api.expr.Expr condition = 3;
    google.api.expr.CheckedExpr checked_condition = 4;
}

message Permission {
    oneof rule {
        Set and_rules = 1;
        Set or_rules = 2;
        bool any = 3;
        .envoy.config.route.v3.HeaderMatcher header = 4;
        .envoy.type.matcher.v3.PathMatcher url_path = 10;
        .envoy.config.core.v3.CidrRange destination_ip = 5;
        uint32 destination_port = 6;
        .envoy.type.v3.Int32Range destination_port_range = 11;
        .envoy.type.matcher.v3.MetadataMatcher metadata = 7;
        Permission not_rule = 8;
        .envoy.type.matcher.v3.StringMatcher requested_server_name = 9;
        .envoy.config.core.v3.TypedExtensionConfig matcher = 12;
        .envoy.config.core.v3.TypedExtensionConfig uri_template = 13;
    }
    
    message Set {
        repeated Permission rules = 1;
    }
}

message Principal {
    oneof identifier {
        Set and_ids = 1;
        Set or_ids = 2;
        bool any = 3;
        Authenticated authenticated = 4;
        .envoy.config.core.v3.CidrRange source_ip = 5 [deprecated = true];
        .envoy.config.core.v3.CidrRange direct_remote_ip = 10;
        .envoy.config.core.v3.CidrRange remote_ip = 11;
        .envoy.config.route.v3.HeaderMatcher header = 6;
        .envoy.type.matcher.v3.PathMatcher url_path = 9;
        .envoy.type.matcher.v3.MetadataMatcher metadata = 7;
        .envoy.type.matcher.v3.FilterStateMatcher filter_state = 12;
        Principal not_id = 8;
    }
    
    message Set {
        repeated Principal ids = 1;
    }
    
    message Authenticated {
        .envoy.type.matcher.v3.StringMatcher principal_name = 2;
        
        reserved 1;
    }
}

message Action {
    string name = 1;
    RBAC.Action action = 2;
}
