syntax = "proto3";

package envoy.config.common.matcher.v3;

import "third_party/envoy/src/api/envoy/config/core/v3/extension.proto";
import "third_party/envoy/src/api/envoy/config/route/v3/route_components.proto";
import "third_party/envoy/src/api/envoy/type/matcher/v3/string.proto";
import "third_party/udpa/udpa/annotations/status.proto";
import "third_party/protoc_gen_validate/validate/validate.proto";

option go_package = "github.com/envoyproxy/go-control-plane/envoy/config/common/matcher/v3;matcherv3";
option java_multiple_files = true;
option java_outer_classname = "MatcherProto";
option java_package = "io.envoyproxy.envoy.config.common.matcher.v3";

message Matcher {
    OnMatch on_no_match = 3;
    message OnMatch {
        oneof on_match {
            Matcher matcher = 1;
            .envoy.config.core.v3.TypedExtensionConfig action = 2;
        }
    }
    
    oneof matcher_type {
        MatcherList matcher_list = 1;
        MatcherTree matcher_tree = 2;
    }
    
    message MatcherList {
        repeated FieldMatcher matchers = 1;
        message FieldMatcher {
            Predicate predicate = 1;
            OnMatch on_match = 2;
        }
        
        message Predicate {
            oneof match_type {
                SinglePredicate single_predicate = 1;
                PredicateList or_matcher = 2;
                PredicateList and_matcher = 3;
                Predicate not_matcher = 4;
            }
            
            message SinglePredicate {
                .envoy.config.core.v3.TypedExtensionConfig input = 1;
                
                oneof matcher {
                    .envoy.type.matcher.v3.StringMatcher value_match = 2;
                    .envoy.config.core.v3.TypedExtensionConfig custom_match = 3;
                }
            }
            
            message PredicateList {
                repeated Predicate predicate = 1;
            }
        }
    }
    
    message MatcherTree {
        .envoy.config.core.v3.TypedExtensionConfig input = 1;
        
        oneof tree_type {
            MatchMap exact_match_map = 2;
            MatchMap prefix_match_map = 3;
            .envoy.config.core.v3.TypedExtensionConfig custom_match = 4;
        }
        
        message MatchMap {
            map<string, OnMatch> map = 1;
        }
    }
}

message MatchPredicate {
    oneof rule {
        MatchSet or_match = 1;
        MatchSet and_match = 2;
        MatchPredicate not_match = 3;
        bool any_match = 4;
        HttpHeadersMatch http_request_headers_match = 5;
        HttpHeadersMatch http_request_trailers_match = 6;
        HttpHeadersMatch http_response_headers_match = 7;
        HttpHeadersMatch http_response_trailers_match = 8;
        HttpGenericBodyMatch http_request_generic_body_match = 9;
        HttpGenericBodyMatch http_response_generic_body_match = 10;
    }
    
    message MatchSet {
        repeated MatchPredicate rules = 1;
    }
}

message HttpHeadersMatch {
    repeated .envoy.config.route.v3.HeaderMatcher headers = 1;
}

message HttpGenericBodyMatch {
    uint32 bytes_limit = 1;
    
    repeated GenericTextMatch patterns = 2;
    message GenericTextMatch {
        oneof rule {
            string string_match = 1;
            bytes binary_match = 2;
        }
    }
}
