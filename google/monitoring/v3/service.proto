syntax = "proto3";

package google.monitoring.v3;

import "google/api/auditing.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/api/slo.proto";
import "google/api/visibility.proto";
import "google/logging/data_governance.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/type/calendar_period.proto";
import "logs/proto/data_access/asr/cloud_monitoring_service_monitoring_resource.proto";
import "storage/datapol/annotations/proto/semantic_annotations.proto";

option ruby_package = "Google::Cloud::Monitoring::V3";
option php_namespace = "Google\\Cloud\\Monitoring\\V3";
option csharp_namespace = "Google.Cloud.Monitoring.V3";
option go_package = "cloud.google.com/go/monitoring/apiv3/v2/monitoringpb;monitoringpb";
option java_multiple_files = true;
option java_outer_classname = "ServiceMonitoringProto";
option java_package = "com.google.monitoring.v3";

message Service {
    string name = 1;
    string display_name = 2;
    
    BasicService basic_service = 19;
    message BasicService {
        string service_type = 1;
        map<string, string> service_labels = 2;
    }
    
    Telemetry telemetry = 13;
    message Telemetry {
        string resource_name = 1;
    }
    
    map<string, string> user_labels = 14;
    bool deleted = 5;
    
    Source source = 18;
    enum Source {
        SOURCE_UNSPECIFIED = 0;
        USER = 1;
        AUTO = 2;
    }
    
    oneof identifier {
        Custom custom = 6;
        AppEngine app_engine = 7;
        CloudEndpoints cloud_endpoints = 8;
        ClusterIstio cluster_istio = 9;
        MeshIstio mesh_istio = 10;
        IstioCanonicalService istio_canonical_service = 11;
        CloudRun cloud_run = 12;
        GkeNamespace gke_namespace = 15;
        GkeWorkload gke_workload = 16;
        GkeService gke_service = 17;
    }
    
    reserved 3, 4;
    
    message Custom {
        
    }
    
    message AppEngine {
        string module_id = 1;
    }
    
    message CloudEndpoints {
        string service = 1;
    }
    
    message ClusterIstio {
        string location = 1;
        string cluster_name = 2;
        string service_namespace = 3;
        string service_name = 4;
    }
    
    message MeshIstio {
        string mesh_uid = 1;
        string service_namespace = 3;
        string service_name = 4;
    }
    
    message IstioCanonicalService {
        string mesh_uid = 1;
        string canonical_service_namespace = 3;
        string canonical_service = 4;
    }
    
    message CloudRun {
        string service_name = 1;
        string location = 2;
    }
    
    message GkeNamespace {
        string project_id = 1;
        string location = 2;
        string cluster_name = 3;
        string namespace_name = 4;
    }
    
    message GkeWorkload {
        string project_id = 1;
        string location = 2;
        string cluster_name = 3;
        string namespace_name = 4;
        string top_level_controller_type = 5;
        string top_level_controller_name = 6;
    }
    
    message GkeService {
        string project_id = 1;
        string location = 2;
        string cluster_name = 3;
        string namespace_name = 4;
        string service_name = 5;
    }
}

message ServiceLevelObjective {
    string name = 1;
    string display_name = 11;
    ServiceLevelIndicator service_level_indicator = 3;
    double goal = 4;
    protobuf.Timestamp create_time = 8;
    protobuf.Timestamp delete_time = 9;
    bool service_management_owned = 10;
    map<string, string> user_labels = 12;
    
    oneof period {
        protobuf.Duration rolling_period = 5;
        type.CalendarPeriod calendar_period = 6;
    }
    
    reserved 2;
    
    enum View {
        VIEW_UNSPECIFIED = 0;
        FULL = 2;
        EXPLICIT = 1;
    }
}

message ServiceLevelIndicator {
    oneof type {
        BasicSli basic_sli = 4;
        RequestBasedSli request_based = 1;
        WindowsBasedSli windows_based = 2;
        RequestBasedMqlSli request_based_mql_sli = 5;
        WindowsBasedMqlSli windows_based_mql_sli = 6;
    }
}

message RequestBasedMqlSli {
    string total_service_query = 1;
    string bad_service_query = 2;
    string good_service_query = 3;
}

message WindowsBasedMqlSli {
    string good_windows_query = 1;
}

message BasicSli {
    repeated string method = 7;
    repeated string location = 8;
    repeated string version = 9;
    
    oneof sli_criteria {
        AvailabilityCriteria availability = 2;
        LatencyCriteria latency = 3;
        OperationAvailabilityCriteria operation_availability = 5;
        OperationLatencyCriteria operation_latency = 6;
    }
    
    reserved 1, 4;
    
    message AvailabilityCriteria {
        
    }
    
    message LatencyCriteria {
        protobuf.Duration threshold = 3;
        api.SloObjective.LatencyExperience experience = 4;
    }
    
    message OperationAvailabilityCriteria {
        
    }
    
    message OperationLatencyCriteria {
        protobuf.Duration threshold = 1;
        api.SloObjective.LatencyExperience experience = 2;
    }
}

message Range {
    double min = 1;
    double max = 2;
}

message RequestBasedSli {
    oneof method {
        TimeSeriesRatio good_total_ratio = 1;
        DistributionCut distribution_cut = 3;
    }
}

message TimeSeriesRatio {
    string good_service_filter = 4;
    string bad_service_filter = 5;
    string total_service_filter = 6;
}

message DistributionCut {
    string distribution_filter = 4;
    Range range = 5;
}

message WindowsBasedSli {
    protobuf.Duration window_period = 4;
    
    oneof window_criterion {
        string good_bad_metric_filter = 5;
        PerformanceThreshold good_total_ratio_threshold = 2;
        MetricRange metric_mean_in_range = 6;
        MetricRange metric_sum_in_range = 7;
    }
    
    message PerformanceThreshold {
        double threshold = 2;
        
        oneof type {
            RequestBasedSli performance = 1;
            BasicSli basic_sli_performance = 3;
        }
    }
    
    message MetricRange {
        string time_series = 1;
        Range range = 4;
    }
}

message SloRepoMetadata {
    repeated string teams = 1;
    repeated string emails = 2;
    string learnmore_url = 3;
    protobuf.Timestamp approve_time = 4;
    repeated string approvers = 5;
    string taxonomy_id = 6;
    bool enable_per_consumer_sli = 7;
    bool enable_slomatic = 8;
}
