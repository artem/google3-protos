syntax = "proto2";

package perftools.tracing;

import "net/base/qos.proto";
import "net/proto2/bridge/proto/message_set.proto";

option java_package = "com.google.tracing";

message RPCFlags {
    enum Flags {
        REQUEST_COMPRESSION_ZIPPY = 1;
        DUPLICATE_SUPPRESSION = 2;
        STREAMING = 4;
        FAIL_FAST = 8;
        RESPONSE_COMPRESSION_ZIPPY = 16;
        REQUEST_COMPRESSION_GIPFELI = 32;
        RESPONSE_COMPRESSION_GIPFELI = 64;
        BIDIRECTIONAL_STREAMING = 128;
        REQUEST_COMPRESSION_BROTLI = 256;
        RESPONSE_COMPRESSION_BROTLI = 512;
        REQUEST_COMPRESSION_ZSTD = 1024;
        RESPONSE_COMPRESSION_ZSTD = 2048;
    }
}

message RPCClientRequestInfo {
    required int64 size_bytes_wire = 1;
    optional int64 size_bytes_app = 2;
    optional int32 protocol = 10 [default = 0];
    optional int32 security_level = 3;
    optional int32 server_ip = 4;
    optional bytes server_ip46 = 12;
    optional int32 server_port = 5;
    optional int32 client_port = 11;
    optional double enqueue_time = 7;
    optional double deadline = 8;
    optional int32 flags = 9 [default = 1];
    optional string message = 100;
    
    extend .proto2.bridge.MessageSet {
        optional RPCClientRequestInfo message_set_extension = 6120541;
    }
}

message RPCServerProcessingInfo {
    optional double server_start_time = 3;
    optional double server_elapsed_time = 4;
}

message RPCClientResponseInfo {
    required int64 size_bytes_wire = 1;
    optional int64 size_bytes_app = 5;
    optional int32 status = 2 [default = 0];
    optional int32 security_level = 4;
    optional RPCServerProcessingInfo server_info = 3;
    optional double client_receive_time = 6;
    optional int32 num_responses = 7;
    optional net_base.qos.TrafficClass rcvd_traffic_class = 8;
    optional bool rcvd_b4_path_selector = 9;
    optional float query_cost = 10;
    
    extend .proto2.bridge.MessageSet {
        optional RPCClientResponseInfo message_set_extension = 6128373;
    }
}

message RPCServerRequestInfo {
    required int64 size_bytes_wire = 1;
    optional int64 size_bytes_app = 2;
    optional int32 protocol = 7 [default = 0];
    optional int32 security_level = 3;
    optional int32 client_ip = 4;
    optional bytes client_ip46 = 12;
    optional int32 client_port = 5;
    optional int32 server_port = 9;
    optional double deadline = 6;
    optional double server_receive_time = 8;
    optional net_base.qos.TrafficClass rcvd_traffic_class = 10;
    optional bool rcvd_b4_path_selector = 11;
    optional string message = 100;
    
    extend .proto2.bridge.MessageSet {
        optional RPCServerRequestInfo message_set_extension = 6131050;
    }
}

message RPCServerResponseInfo {
    required int64 size_bytes_wire = 1;
    optional int64 size_bytes_app = 5;
    optional double enqueue_time = 2;
    optional RPCServerProcessingInfo processing_info = 3;
    optional int32 flags = 4 [default = 1];
    optional int32 num_responses = 6;
    optional float query_cost = 7;
    optional string message = 100;
    
    extend .proto2.bridge.MessageSet {
        optional RPCServerResponseInfo message_set_extension = 6145233;
    }
}

message RPCStreamingResponseInfo {
    required int64 size_bytes_app = 1;
    required int64 size_bytes_wire = 2;
    optional int32 seqno = 3;
    
    extend .proto2.bridge.MessageSet {
        optional RPCStreamingResponseInfo message_set_extension = 6815927;
    }
}
