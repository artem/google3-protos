syntax = "proto2";

import public "chubby/lib/proto/informational.proto";
import public "chubby/lib/proto/statinfo.proto";
import public "chubby/lib/proto/timestamp.proto";
option java_package = "com.google.chubby.impl.ChubbyProtos";

enum LockServerWire_HeartBeatingProtocol {
  KA_DYNAMIC = 0;
  KA_UDP_ONLY = 1;
  KA_TCP_ONLY = 2;
}

message LockServerWire_ClientInfo {
  optional string auth_secure = 1;
  required string auth_insecure = 2;
  optional string host = 3;
  optional int32 pid = 4;
  optional string binary = 5;
  required uint64 session_id = 6;
  optional int32 version = 7;
  optional string thinmint_granting_user = 8;
  optional int32 kernel_cpu_scheduling_latency = 9;
}

message LockServerWire_SessionInfo {
  required string auth = 1;
  required uint64 session_id = 2;
  required uint64 session_check = 3;
  optional int64 epoch = 4;
  optional int64 call_id = 5;
  optional .LockServerWire_ClientInfo proxying_for = 6;
  optional string program = 7;
  reserved 8;
}

message LockServerWire_HandleInfo {
  enum ChubbyClientLatencyCategory {
    REGULAR_CPU_LATENCY = 0;
    LATENCY_SENSITIVE_CPU_LATENCY = 1;
  }
  required int32 open_mode = 1;
  required uint64 handle = 2;
  required string name = 3;
  required uint64 instance = 4;
  required uint64 handle_check = 5;
  required int32 notification_mask = 6;
  optional int32 lock_delay_ms = 7 [default = 0];
  optional uint64 proxying_for = 10;
  optional int32 exclusive_lock = 11;
  optional int32 shared_lock = 12;
  optional int32 type = 13;
  optional string thinmint_granting_user = 14;
  optional .LockServerWire_HandleInfo.ChubbyClientLatencyCategory client_latency_category = 15;
}

message LockServerWire_NewSession_Arg {
  enum ClientLanguage {
    LANG_CPP = 0;
    LANG_JAVA = 1;
    LANG_PYTHON = 2;
    LANG_GO = 3;
  }
  required string auth = 1;
  optional string host = 2;
  optional int32 pid = 3;
  optional string binary = 4;
  optional int32 version = 5;
  optional int32 proxy_port = 6;
  optional bool java_client = 7 [default = false];
  optional .LockServerWire_NewSession_Arg.ClientLanguage client_language = 8;
  optional int32 mountpoints_enabled = 9;
  optional string task_handle = 10;
  optional .LockServerWire_HeartBeatingProtocol ka_protocol = 11 [default = KA_DYNAMIC];
  optional int32 preferred_max_event_bundle_size = 12 [default = 2];
  optional bool cache_watch_all = 13 [default = false];
  optional int32 kernel_cpu_scheduling_latency = 14;
}

message LockServerWire_RegisterSession_Arg {
  required .LockServerWire_SessionInfo session = 1;
  required .LockServerWire_NewSession_Arg new_session_arg = 2;
  repeated .LockServerWire_HandleInfo locks = 3;
  repeated uint64 UNUSED_handles = 4;
  optional string auth_secure = 17;
  reserved 18, 19;
}

message LockServerWire_TransferClients_Arg {
  required .LockServerWire_SessionInfo session = 1;
  repeated group Client = 2 {
    required .LockServerWire_ClientInfo client_info = 3;
    repeated .LockServerWire_HandleInfo locks = 4;
  }
}

message LockServerWire_JustSession_Arg {
  required .LockServerWire_SessionInfo session = 1;
  optional int32 version = 2;
  optional bool want_proxies = 3;
  optional bool using_loas = 4;
  optional string binary = 5;
  optional bool java_client = 6 [default = false];
  optional string cell = 7;
  optional int32 mountpoints_enabled = 8;
  optional bool proxied = 9;
}

message LockServerWire_IsEmpty_Arg {
  required string auth = 1;
  required string name = 2;
}

message LockServerWire_MiniStat_Arg {
  required .LockServerWire_SessionInfo session = 1;
  required string name = 2;
  required bool contents = 3;
  required bool cached = 4;
}

message LockServerWire_RpcLatencyHistogramBucket {
  optional int32 lo = 3;
  required int32 hi = 1;
  required uint64 count = 2;
}

message LockServerWire_RpcLatencyHistogram {
  enum RpcType {
    KEEPALIVE = 0;
    NEW_SESSION = 1;
    END_SESSION = 2;
    OPEN = 3;
    DELETE = 4;
    SET_ACL = 5;
    IS_EMPTY = 6;
    MINI_STAT = 7;
    CLOSE = 8;
    GET_STAT = 9;
    GET_CONTENTS = 10;
    READ_DIR = 11;
    SET_CONTENTS = 12;
    TRY_ACQUIRE_EXCLUSIVE = 13;
    RELEASE_EXCLUSIVE = 14;
    TRY_ACQUIRE_SHARED = 15;
    RELEASE_SHARED = 16;
    TRY_RE_ACQUIRE = 17;
    TRANSFER_CLIENTS = 18;
    RESERVE_IDS = 19;
    NUM_RPC_TYPES = 20;
  }
  required .LockServerWire_RpcLatencyHistogram.RpcType rpc_type = 1;
  repeated .LockServerWire_RpcLatencyHistogramBucket bucket = 2;
}

message LockServerWire_LatencyStats {
  repeated .LockServerWire_RpcLatencyHistogram rpc_histogram = 1;
}

message LockServerWire_EventACK {
  required int64 sequence = 1;
  required int32 index = 2;
}

message LockServerWire_KeepAlive_Arg {
  required .LockServerWire_SessionInfo session = 1;
  required int64 sequence = 2;
  optional int64 timeout = 3;
  optional int32 num_sessions = 4;
  repeated int64 sequence_processed = 6;
  optional .LockServerWire_LatencyStats latency_stats = 7;
  optional int32 kernel_cpu_scheduling_latency = 8;
  optional int64 previous_lease_left_ms = 9;
  repeated .LockServerWire_Timestamp roundtrip_timestamp = 10;
  optional .chubby.ClientStats client_stats = 11;
  repeated .LockServerWire_EventACK event_ack = 12;
}

message LockServerWire_Handle_Arg {
  required .LockServerWire_SessionInfo session = 1;
  repeated .LockServerWire_HandleInfo handle_info = 2;
  optional int32 new_mode = 3;
  optional string sequencer = 4;
  optional bool apply_lock_delay = 5;
  optional bool handle_refresh = 6 [default = false];
}

message LockServerWire_NotifyDir_Arg {
  required string auth = 1;
  required string name = 2;
  repeated .LockServerWire_StatInfo stat_info = 3;
  required int32 event = 4;
}

message LockServerWire_ReadDir_Arg {
  required .LockServerWire_SessionInfo session = 1;
  required string from = 2;
  required int32 max = 3;
  required bool backward = 4;
  repeated .LockServerWire_HandleInfo handle_info = 5;
  optional string sequencer = 6;
}

message LockServerWire_SetACL_Arg {
  required .LockServerWire_SessionInfo session = 1;
  repeated .LockServerWire_HandleInfo handle_info = 2;
  required uint64 acl_generation = 3;
  required string owner = 4;
  required string write = 5;
  required string read = 6;
  repeated .LockServiceACL lockservice_acl_owner = 8;
  repeated .LockServiceACL lockservice_acl_write = 9;
  repeated .LockServiceACL lockservice_acl_read = 10;
  optional string sequencer = 7;
}

message LockServerWire_SetLatencyClass_Arg {
  optional .LockServerWire_SessionInfo session = 1;
  repeated .LockServerWire_HandleInfo handle_info = 2;
  optional uint64 latency_class_generation = 3;
  optional .ChubbyLatencyClass latency_class = 4;
  optional string sequencer = 5;
}

message LockServerWire_SetContents_Arg {
  required .LockServerWire_SessionInfo session = 1;
  required uint64 generation = 2;
  required bytes new_data = 3;
  repeated .LockServerWire_HandleInfo handle_info = 4;
  optional string sequencer = 5;
  repeated .LockServerWire_Timestamp lifetime_timestamp = 6;
}

message LockServerWire_Open_Arg {
  required .LockServerWire_SessionInfo session = 1;
  required string name = 2;
  repeated .LockServerWire_HandleInfo handle_info = 3;
  required int32 mode = 4;
  required int32 type = 5;
  required int32 notification_mask = 6;
  optional string sequencer = 7;
  optional int32 lock_delay_ms = 8;
  optional string owner = 9;
  optional string write = 10;
  optional string read = 11;
  repeated .LockServiceACL lockservice_acl_owner = 14;
  repeated .LockServiceACL lockservice_acl_write = 15;
  repeated .LockServiceACL lockservice_acl_read = 16;
  optional bytes contents = 12;
  optional .ChubbyLatencyClass latency_class = 13;
}

message LockServerWire_ReserveIds_Arg {
  required .LockServerWire_SessionInfo session = 1;
  required int32 count = 2;
}

message LockServerWire_Event {
  required int32 event = 1;
  optional uint64 handle = 2;
  optional uint64 handle_check = 3;
  optional int64 instance = 4;
  optional .LockServerWire_StatInfo info = 5;
  optional bool weak_consistency = 6;
  optional string handle_name = 7;
  optional bool notify_all = 8 [default = true];
  repeated string notify_name = 9;
  repeated .LockServerWire_Timestamp lifetime_timestamp = 42;
  optional uint64 generation = 43;
  optional bool invalidate_all_reset = 44 [default = false];
}

message LockServerWire_Status {
  optional .LockServerWire_SessionInfo session = 1;
  required int32 status = 2;
  required int32 error = 3;
  required int64 current_time = 4;
  repeated .LockServerWire_StatInfo stat_info = 5;
  optional string master_name = 6;
  optional uint64 handle = 7;
  optional uint64 handle_check = 8;
  optional int64 instance = 9;
  optional int64 sequence = 10;
  optional int64 timeout = 11;
  optional bool nocache = 12;
  optional int64 epoch = 13;
  optional int32 keepalive_port = 14;
  optional int32 version = 15;
  optional bool using_loas = 16;
  optional double max_rpc_sec = 17;
  repeated string proxy_host_port = 20;
  optional group ForProxy = 21 {
    optional uint64 reserved_ids_first = 22;
    optional int32 reserved_ids_count = 23;
    repeated group RegisteredClient = 24 {
      required .LockServerWire_ClientInfo client_info = 25;
      required bool success = 26;
      repeated group Handle = 28 {
        required .LockServerWire_HandleInfo handle_info = 29;
        required .LockServerWire_StatInfo stat_info = 30;
        optional bool nocache = 31;
      }
    }
  }
  optional int32 alternate_port = 32;
  optional string alternate_proxy = 33;
  repeated .LockServerWire_Event additional_event = 34;
  optional bool weak_consistency = 35;
  repeated string live_stout_peer = 36;
  optional string error_detail = 37;
  optional string handle_name = 38;
  optional bool notify_all = 39 [default = true];
  repeated string notify_name = 40;
  optional string hostname = 41;
  repeated .LockServerWire_Timestamp lifetime_timestamp = 42;
  optional int64 pinch_cap_ms = 43;
  optional uint64 num_uncompleted_notifications = 45;
  optional uint64 generation = 46;
  optional bool invalidate_all_reset = 47 [default = false];
  reserved 44;
}

message LockServer_SessionData {
  optional string auth_secure = 1;
  optional string auth_insecure = 2;
  optional string host = 3;
  optional int32 pid = 4;
  optional string binary = 5;
  optional int32 version = 6;
  optional string proxy_host_port = 7;
  optional string task_handle = 8;
  optional .LockServerWire_HeartBeatingProtocol ka_protocol = 9 [default = KA_DYNAMIC];
  optional int32 preferred_max_event_bundle_size = 10 [default = 2];
  optional bool cache_watch_all = 11 [default = false];
  optional int32 kernel_cpu_scheduling_latency = 12;
  optional .LockServerWire_NewSession_Arg.ClientLanguage client_language = 13;
}

message LockServer_LockData {
  optional uint64 instance = 1;
  optional int32 open_mode = 2;
  optional int32 notification_mask = 3;
  optional int32 lock_mode = 4;
  optional int64 call_id = 5;
  optional uint64 client_session_id = 6;
  optional uint64 client_handle_id = 7;
  optional string thinmint_granting_user = 8;
  optional int64 client_kernel_cpu_latency_ms = 9;
  optional .LockServerWire_ClientInfo leaf_client = 10;
}

message ChubbyUserLimits {
  optional int32 space_quota_in_bytes = 4 [default = 1048576];
  optional int32 node_count_quota = 5;
  optional int32 per_session_session_state_quota = 6;
  optional int32 aggregate_session_state_quota = 7;
}

message RPCThrottlingExemptionRule {
  required string user = 1;
  required string binary = 2;
}

message RPCThrottlingExemptionRules {
  repeated .RPCThrottlingExemptionRule rule = 1;
}

message PerUserMinimumVersion {
  required string user = 1;
  required int32 minimum_version = 2;
}

message PerBinaryMinimumVersion {
  required string binary = 1;
  required int32 minimum_version = 2;
}

message DirectoriesWithNoInherit {
  repeated string dir = 1;
}

message ChubbyConfiguration {
  message LowLatencyWhitelistEntry {
    optional string user = 1;
    optional string binary_regex = 2;
  }
  required .ChubbyUserLimits default_user_limits = 1;
  repeated group PerUserChubbyLimits = 2 {
    required string user = 3;
    required .ChubbyUserLimits user_limits = 4;
  }
  optional .RPCThrottlingExemptionRules rpc_throttling_exemption_rules = 5;
  optional int32 default_minimum_version = 6;
  repeated .PerUserMinimumVersion per_user_minimum_version = 7;
  repeated .PerBinaryMinimumVersion per_binary_minimum_version = 8;
  optional .DirectoriesWithNoInherit dirs_no_inherit = 9;
  optional string files_no_inherit_regex = 10;
  repeated .ChubbyConfiguration.LowLatencyWhitelistEntry low_latency_whitelist = 12;
  optional int64 lockserver_latency_class_generation_override = 13;
  optional int64 stout_latency_class_generation_override = 14;
  reserved 11;
}

service LockServerWire {
  rpc Null(.LockServerWire_JustSession_Arg) returns (.LockServerWire_Status);
  rpc NewSession(.LockServerWire_NewSession_Arg) returns (.LockServerWire_Status);
  rpc EndSession(.LockServerWire_JustSession_Arg) returns (.LockServerWire_Status);
  rpc Open(.LockServerWire_Open_Arg) returns (.LockServerWire_Status);
  rpc Close(.LockServerWire_Handle_Arg) returns (.LockServerWire_Status);
  rpc Delete(.LockServerWire_Handle_Arg) returns (.LockServerWire_Status);
  rpc ReadDir(.LockServerWire_ReadDir_Arg) returns (.LockServerWire_Status);
  rpc IsEmpty(.LockServerWire_IsEmpty_Arg) returns (.LockServerWire_Status);
  rpc MiniStat(.LockServerWire_MiniStat_Arg) returns (.LockServerWire_Status);
  rpc NotifyDir(.LockServerWire_NotifyDir_Arg) returns (.LockServerWire_Status);
  rpc SetACL(.LockServerWire_SetACL_Arg) returns (.LockServerWire_Status);
  rpc SetLatencyClass(.LockServerWire_SetLatencyClass_Arg) returns (.LockServerWire_Status);
  rpc GetStat(.LockServerWire_Handle_Arg) returns (.LockServerWire_Status);
  rpc GetContents(.LockServerWire_Handle_Arg) returns (.LockServerWire_Status);
  rpc SetContents(.LockServerWire_SetContents_Arg) returns (.LockServerWire_Status);
  rpc KeepAlive(.LockServerWire_KeepAlive_Arg) returns (.LockServerWire_Status);
  rpc AcquireExclusive(.LockServerWire_Handle_Arg) returns (.LockServerWire_Status);
  rpc TryAcquireExclusive(.LockServerWire_Handle_Arg) returns (.LockServerWire_Status);
  rpc ReleaseExclusive(.LockServerWire_Handle_Arg) returns (.LockServerWire_Status);
  rpc AcquireShared(.LockServerWire_Handle_Arg) returns (.LockServerWire_Status);
  rpc TryAcquireShared(.LockServerWire_Handle_Arg) returns (.LockServerWire_Status);
  rpc ReleaseShared(.LockServerWire_Handle_Arg) returns (.LockServerWire_Status);
  rpc TryReacquire(.LockServerWire_Handle_Arg) returns (.LockServerWire_Status);
  rpc ReserveIds(.LockServerWire_ReserveIds_Arg) returns (.LockServerWire_Status);
  rpc RegisterSession(.LockServerWire_RegisterSession_Arg) returns (.LockServerWire_Status);
  rpc TransferClients(.LockServerWire_TransferClients_Arg) returns (.LockServerWire_Status);
}


