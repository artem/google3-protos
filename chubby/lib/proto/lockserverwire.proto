syntax = "editions";

import public "chubby/lib/proto/chubby_checksums.proto";
import public "chubby/lib/proto/client_library_name.proto";
import public "chubby/lib/proto/informational.proto";
import public "chubby/lib/proto/statinfo.proto";
import public "chubby/lib/proto/timestamp.proto";
import "chubby/lib/proto/lockservice_cell_migration_config.proto";
import "consensus/common/proto/event_tags.proto";
import "frameworks/platform/endpoints/rpc/options/generic_services.proto";
import "third_party/java/protobuf/java_features.proto";
import "third_party/protobuf/cpp_features.proto";

option java_package = "com.google.chubby.impl.chubbyprotos";

service LockServerWire {
    rpc Null(LockServerWire_JustSession_Arg) returns (LockServerWire_Status);
    rpc NewSession(LockServerWire_NewSession_Arg) returns (LockServerWire_Status);
    rpc EndSession(LockServerWire_JustSession_Arg) returns (LockServerWire_Status);
    rpc Open(LockServerWire_Open_Arg) returns (LockServerWire_Status);
    rpc Close(LockServerWire_Handle_Arg) returns (LockServerWire_Status);
    rpc Delete(LockServerWire_Handle_Arg) returns (LockServerWire_Status);
    rpc ReadDir(LockServerWire_ReadDir_Arg) returns (LockServerWire_Status);
    rpc IsEmpty(LockServerWire_IsEmpty_Arg) returns (LockServerWire_Status);
    rpc MiniStat(LockServerWire_MiniStat_Arg) returns (LockServerWire_Status);
    rpc NotifyDir(LockServerWire_NotifyDir_Arg) returns (LockServerWire_Status);
    rpc SetACL(LockServerWire_SetACL_Arg) returns (LockServerWire_Status);
    rpc GetStat(LockServerWire_Handle_Arg) returns (LockServerWire_Status);
    rpc GetContents(LockServerWire_Handle_Arg) returns (LockServerWire_Status);
    rpc SetContents(LockServerWire_SetContents_Arg) returns (LockServerWire_Status);
    rpc KeepAlive(LockServerWire_KeepAlive_Arg) returns (LockServerWire_Status);
    rpc AcquireExclusive(LockServerWire_Handle_Arg) returns (LockServerWire_Status);
    rpc TryAcquireExclusive(LockServerWire_Handle_Arg) returns (LockServerWire_Status);
    rpc ReleaseExclusive(LockServerWire_Handle_Arg) returns (LockServerWire_Status);
    rpc AcquireShared(LockServerWire_Handle_Arg) returns (LockServerWire_Status);
    rpc TryAcquireShared(LockServerWire_Handle_Arg) returns (LockServerWire_Status);
    rpc ReleaseShared(LockServerWire_Handle_Arg) returns (LockServerWire_Status);
    rpc TryReacquire(LockServerWire_Handle_Arg) returns (LockServerWire_Status);
    rpc ReserveIds(LockServerWire_ReserveIds_Arg) returns (LockServerWire_Status);
    rpc RegisterSession(LockServerWire_RegisterSession_Arg) returns (LockServerWire_Status);
    rpc TransferClients(LockServerWire_TransferClients_Arg) returns (LockServerWire_Status);
    rpc ReadCellMigrationConfig(LockServerWire_ReadCellMigrationConfig_Arg) returns (LockServerWire_Status);
}

message LockServerWire_ClientInfo {
    optional string auth_secure = 1;
    optional string auth_insecure = 2;
    repeated string security_realms = 10;
    optional string host = 3;
    optional int32 pid = 4;
    optional string binary = 5;
    optional uint64 session_id = 6;
    optional int32 version = 7;
    optional LockServerWire_NewSession_Arg.ClientLanguage client_language = 11;
    optional string client_library = 12 [deprecated = true];
    optional string thinmint_granting_user = 8;
    optional int32 kernel_cpu_scheduling_latency = 9;
    optional bool is_envelope_client = 13;
    optional chubby.ClientLibraryName client_library_name = 14;
}

message LockServerWire_SessionInfo {
    optional string auth = 1;
    repeated string security_realms = 9;
    optional uint64 session_id = 2;
    optional uint64 session_check = 3;
    optional int64 epoch = 4;
    optional int64 call_id = 5;
    optional LockServerWire_ClientInfo proxying_for = 6;
    optional string program = 7;
    optional string cell = 10;
    optional string throttler_role = 11;
    
    reserved 8;
}

message LockServerWire_HandleInfo {
    optional int32 open_mode = 1;
    optional uint64 handle = 2;
    optional string name = 3;
    optional string original_cell = 16;
    optional uint64 instance = 4;
    optional uint64 handle_check = 5;
    optional int32 notification_mask = 6;
    optional int32 lock_delay_ms = 7 [default = 0];
    optional uint64 proxying_for = 10;
    optional int32 exclusive_lock = 11;
    optional int32 shared_lock = 12;
    optional int32 type = 13;
    optional string thinmint_granting_user = 14;
    
    optional ChubbyClientLatencyCategory client_latency_category = 15;
    enum ChubbyClientLatencyCategory {
        LATENCY_TOLERANT_CPU_LATENCY = 0;
        LATENCY_SENSITIVE_CPU_LATENCY = 1;
    }
}

message OperationChecksums {
    repeated chubby.ChubbyChecksumData checksums = 1;
}

message VersionInfoMessage {
    optional int64 instance = 1;
    optional int64 generation = 2;
    optional int64 acl_generation = 3;
    optional int64 lock_generation = 4;
    optional int32 lock_mode = 5;
    optional bytes backend_fingerprint = 6;
}

message LockServerWire_NewSession_Arg {
    optional string auth = 1;
    optional string host = 2;
    optional int32 pid = 3;
    optional string binary = 4;
    optional int32 version = 5;
    optional int32 proxy_port = 6;
    optional bool java_client = 7 [default = false];
    
    optional ClientLanguage client_language = 8;
    enum ClientLanguage {
        LANG_CPP = 0;
        LANG_JAVA = 1;
        LANG_PYTHON = 2;
        LANG_GO = 3;
    }
    
    optional string client_library = 15 [deprecated = true];
    optional int32 mountpoints_enabled = 9;
    optional string task_handle = 10;
    optional LockServerWire_HeartBeatingProtocol ka_protocol = 11 [default = KA_DYNAMIC];
    optional int32 preferred_max_event_bundle_size = 12 [default = 2];
    optional bool cache_watch_all = 13 [default = false];
    optional int32 kernel_cpu_scheduling_latency = 14;
    optional bool is_envelope_client = 16;
    optional chubby.ClientLibraryName client_library_name = 17;
    optional string forge_test_binary = 18;
    
    optional UseProxyMode lockservice_use_proxy = 19;
    enum UseProxyMode {
        UNKNOWN = 0;
        ALWAYS = 1;
        NEVER = 2;
        PREFERRED = 3;
    }
    
    optional bool support_bounded_incremental_refresh = 20;
    optional string physical_cell = 21;
}

message LockServerWire_RegisterSession_Arg {
    optional LockServerWire_SessionInfo session = 1;
    optional LockServerWire_NewSession_Arg new_session_arg = 2;
    repeated LockServerWire_HandleInfo locks = 3;
    repeated uint64 UNUSED_handles = 4;
    optional string auth_secure = 17;
    
    reserved 18, 19;
}

message LockServerWire_TransferClients_Arg {
    optional LockServerWire_SessionInfo session = 1;
    
    repeated Client client = 2;
    message Client {
        optional LockServerWire_ClientInfo client_info = 3;
        repeated LockServerWire_HandleInfo locks = 4;
    }
}

message LockServerWire_JustSession_Arg {
    optional LockServerWire_SessionInfo session = 1;
    optional int32 version = 2;
    optional bool want_proxies = 3;
    optional string binary = 5;
    optional bool java_client = 6 [default = false];
    optional string cell = 7;
    optional int32 mountpoints_enabled = 8;
    optional bool proxied = 9;
    
    reserved 4;
}

message LockServerWire_IsEmpty_Arg {
    optional string auth = 1;
    optional string name = 2;
}

message LockServerWire_MiniStat_Arg {
    optional LockServerWire_SessionInfo session = 1;
    optional string name = 2;
    optional string original_cell = 7;
    optional bool contents = 3;
    optional bool cached = 4;
    optional int32 client_version = 5;
    optional LockServerWire_NewSession_Arg.ClientLanguage client_language = 6;
    optional bool refresh = 8;
}

message LockServerWire_EventACK {
    optional int64 sequence = 1;
    optional int32 index = 2;
}

message LockServerWire_KeepAlive_Arg {
    optional LockServerWire_SessionInfo session = 1;
    optional int64 sequence = 2;
    optional int64 timeout = 3;
    optional int32 num_sessions = 4;
    repeated int64 sequence_processed = 6;
    optional int32 kernel_cpu_scheduling_latency = 8;
    optional int64 previous_lease_left_ms = 9;
    repeated LockServerWire_Timestamp roundtrip_timestamp = 10;
    optional chubby.ClientStats client_stats = 11;
    repeated LockServerWire_EventACK event_ack = 12;
    optional bool handle_reopen_completed = 13;
    
    reserved 7;
}

message LockServerWire_Handle_Arg {
    optional LockServerWire_SessionInfo session = 1;
    repeated LockServerWire_HandleInfo handle_info = 2;
    optional int32 new_mode = 3;
    optional string sequencer = 4;
    optional bool apply_lock_delay = 5;
    optional bool handle_refresh = 6 [default = false];
    optional OperationChecksums checksum = 7;
    optional bool bounded_incremental_refresh = 8;
    optional bytes new_contents = 9;
    optional VersionInfoMessage expected_version = 10;
}

message LockServerWire_NotifyDir_Arg {
    optional string auth = 1;
    optional string name = 2;
    repeated LockServerWire_StatInfo stat_info = 3;
    optional int32 event = 4;
}

message LockServerWire_ReadDir_Arg {
    optional LockServerWire_SessionInfo session = 1;
    optional string from = 2;
    optional int32 max = 3;
    optional bool backward = 4;
    repeated LockServerWire_HandleInfo handle_info = 5;
    optional string sequencer = 6;
}

message LockServerWire_SetACL_Arg {
    optional LockServerWire_SessionInfo session = 1;
    repeated LockServerWire_HandleInfo handle_info = 2;
    optional uint64 acl_generation = 3;
    optional string owner = 4;
    optional string write = 5;
    optional string read = 6;
    optional LockServerWire_LockServiceACL lockservice_acl_owner = 11;
    repeated LockServerWire_LockServiceACL lockservice_acl_writers = 9;
    repeated LockServerWire_LockServiceACL lockservice_acl_readers = 10;
    optional string sequencer = 7;
    optional OperationChecksums checksum = 12;
    
    reserved 8;
}

message LockServerWire_SetContents_Arg {
    optional LockServerWire_SessionInfo session = 1;
    optional uint64 generation = 2;
    optional bytes new_data = 3;
    repeated LockServerWire_HandleInfo handle_info = 4;
    optional string sequencer = 5;
    repeated LockServerWire_Timestamp lifetime_timestamp = 6;
    optional OperationChecksums checksum = 7;
}

message LockServerWire_Open_Arg {
    optional LockServerWire_SessionInfo session = 1;
    optional string name = 2;
    repeated LockServerWire_HandleInfo handle_info = 3;
    optional int32 mode = 4;
    optional int32 type = 5;
    optional int32 notification_mask = 6;
    optional string sequencer = 7;
    optional int32 lock_delay_ms = 8;
    optional string owner = 9;
    optional string write = 10;
    optional string read = 11;
    optional LockServerWire_LockServiceACL lockservice_acl_owner = 17;
    repeated LockServerWire_LockServiceACL lockservice_acl_writers = 15;
    repeated LockServerWire_LockServiceACL lockservice_acl_readers = 16;
    optional bytes contents = 12;
    optional OperationChecksums checksum = 18;
    
    reserved 14, 13;
}

message LockServerWire_ReserveIds_Arg {
    optional LockServerWire_SessionInfo session = 1;
    optional int32 count = 2;
}

message LockServerWire_ReadCellMigrationConfig_Arg {
    optional int32 client_version = 1;
    optional LockServerWire_NewSession_Arg.ClientLanguage client_language = 2;
    optional string auth = 3;
}

message LockServerWire_Event {
    optional int32 event = 1;
    optional uint64 handle = 2;
    optional uint64 handle_check = 3;
    optional int64 instance = 4;
    optional LockServerWire_StatInfo info = 5;
    optional string handle_name = 7;
    optional bool notify_all = 8 [default = true];
    repeated string notify_name = 9;
    optional bool support_bounded_incremental_refresh = 10;
    repeated LockServerWire_Timestamp lifetime_timestamp = 42;
    optional uint64 generation = 43;
    optional bool invalidate_all_reset = 44 [default = false];
    optional bool bounded_incremental_refresh_bogus_event = 45;
    optional bool bounded_incremental_refresh_not_useful_event = 46;
    
    reserved 6;
    
    reserved "weak_consistency";
}

message ReadDirConsistencyInfo {
    optional int64 start_generation = 1;
    optional int64 end_generation = 2;
}

message LimitedStatInfoForLogging {
    optional string name = 1;
    optional uint64 instance = 2;
    optional int32 node_type = 3;
}

message LockServerWire_Status {
    optional LockServerWire_SessionInfo session = 1;
    optional int32 status = 2;
    optional int32 error = 3;
    optional int64 current_time = 4;
    repeated LockServerWire_StatInfo stat_info = 5;
    optional string master_name = 6;
    optional uint64 handle = 7;
    optional uint64 handle_check = 8;
    optional int64 instance = 9;
    optional int64 sequence = 10;
    optional int64 timeout = 11;
    optional bool nocache = 12;
    optional int64 epoch = 13;
    optional int32 keepalive_port = 14;
    optional int32 version = 15;
    repeated string proxy_host_port = 20;
    
    optional ForProxy forproxy = 21;
    message ForProxy {
        optional uint64 reserved_ids_first = 22;
        optional int32 reserved_ids_count = 23;
        
        repeated RegisteredClient registeredclient = 24;
        message RegisteredClient {
            optional LockServerWire_ClientInfo client_info = 25;
            optional bool success = 26;
            
            repeated Handle handle = 28;
            message Handle {
                optional LockServerWire_HandleInfo handle_info = 29;
                optional LockServerWire_StatInfo stat_info = 30;
                optional bool nocache = 31;
            }
        }
    }
    
    optional int32 alternate_port = 32;
    optional string alternate_proxy = 33;
    repeated LockServerWire_Event additional_event = 34;
    repeated string live_stout_peer = 36;
    optional string error_detail = 37;
    optional string handle_name = 38;
    optional bool notify_all = 39 [default = true];
    repeated string notify_name = 40;
    optional bool support_bounded_incremental_refresh = 53;
    optional string hostname = 41;
    repeated LockServerWire_Timestamp lifetime_timestamp = 42;
    optional int64 pinch_cap_ms = 43;
    optional uint64 num_uncompleted_notifications = 45;
    optional uint64 generation = 46;
    optional bool invalidate_all_reset = 47 [default = false];
    optional ReadDirConsistencyInfo read_dir_consistency_info = 48;
    optional bool acquire_was_blocked = 49 [default = false];
    optional int32 supported_checksum_version = 50;
    optional chubby.LockserviceCellMigrationConfig cell_migration_config = 51;
    repeated LimitedStatInfoForLogging child_statinfo_for_logging = 52;
    optional bool bounded_incremental_refresh_bogus_event = 54;
    optional bool bounded_incremental_refresh_not_useful_event = 55;
    
    reserved 16, 17, 35, 44;
    
    reserved "weak_consistency";
}

message LockServer_SessionData {
    optional string auth_secure = 1;
    optional string auth_insecure = 2;
    repeated string security_realms = 14;
    optional string host = 3;
    optional int32 pid = 4;
    optional string binary = 5;
    optional int32 version = 6;
    optional string proxy_host_port = 7;
    optional string task_handle = 8;
    optional LockServerWire_HeartBeatingProtocol ka_protocol = 9 [default = KA_DYNAMIC];
    optional int32 preferred_max_event_bundle_size = 10 [default = 2];
    optional bool cache_watch_all = 11 [default = false];
    optional int32 kernel_cpu_scheduling_latency = 12;
    optional LockServerWire_NewSession_Arg.ClientLanguage client_language = 13;
    optional string client_library = 15 [deprecated = true];
    optional bool is_envelope_client = 16;
    optional chubby.ClientLibraryName client_library_name = 17;
    optional consensus.EventTags session_tags = 18;
    optional bool bounded_incremental_refresh = 19 [default = false];
    optional string physical_cell = 20;
}

message LockServer_LockData {
    optional uint64 instance = 1;
    optional int32 open_mode = 2;
    optional int32 notification_mask = 3;
    optional int32 lock_mode = 4;
    optional int64 call_id = 5;
    optional uint64 client_session_id = 6;
    optional uint64 client_handle_id = 7;
    optional string thinmint_granting_user = 8;
    optional int64 client_kernel_cpu_latency_ms = 9;
    optional LockServerWire_ClientInfo leaf_client = 10;
}

message LockServer_MasterTime {
    optional int64 timestamp_ms = 1;
    optional string master_epoch = 2;
}

enum LockServerWire_HeartBeatingProtocol {
    KA_DYNAMIC = 0;
    KA_TCP_ONLY = 2;
}
