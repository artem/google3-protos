syntax = "proto2";

package local_chubby;

import "chubby/lib/proto/chubby_checksums.proto";
import "chubby/lib/proto/lockserverwire.proto";
import "chubby/lib/proto/statinfo.proto";
import "net/proto2/proto/empty.proto";

option java_outer_classname = "ChubbyLamprey";
option java_package = "com.google.chubby";

service LocalChubby {
    rpc Work(Request) returns (Reply);
    rpc Event(EventReq) returns (EventResp);
    rpc Watcher(WatcherReq) returns (WatcherResp);
    rpc ForMaster(Master) returns (Master);
}

service LocalChubby2 {
    rpc GetVersion(.proto2.Empty) returns (VersionResponse);
    rpc Watch(WatchRequest) returns (stream WatcherEvent);
    rpc CreateContentsChecksum(CreateContentsChecksumRequest) returns (CreateContentsChecksumResponse);
    rpc Open(OpenRequest) returns (stream Event);
    rpc SetContents(SetContentsRequest) returns (SetContentsResponse);
    rpc GetContents(GetContentsRequest) returns (GetContentsResponse);
    rpc Stat(StatRequest) returns (StatResponse);
    rpc ReadDir(ReadDirRequest) returns (ReadDirResponse);
    rpc Delete(DeleteRequest) returns (DeleteResponse);
    rpc SetACLs(SetACLsRequest) returns (SetACLsResponse);
    rpc Lock(LockRequest) returns (LockResponse);
    rpc Unlock(UnlockRequest) returns (UnlockResponse);
    rpc GetSequence(GetSequenceRequest) returns (GetSequenceResponse);
    rpc SetSequence(SetSequenceRequest) returns (SetSequenceResponse);
    rpc CheckSequence(CheckSequenceRequest) returns (CheckSequenceResponse);
    rpc Poison(PoisonRequest) returns (PoisonResponse);
    rpc Close(CloseRequest) returns (CloseResponse);
}

message Stat {
    optional string name = 1;
    optional int64 instance = 2;
    optional int64 generation = 3;
    optional int64 acl_generation = 4;
    optional int64 lock_generation = 5;
    optional int64 size = 6;
    optional int64 node_type = 7;
    optional ACLList acls = 8;
    optional ActionInfo create = 9;
    optional ActionInfo modify = 10;
    optional ActionInfo acquire = 11;
    optional ActionInfo acl_change = 12;
    optional int64 lock_mode = 13;
    optional int64 expires = 14;
    optional uint64 checksum = 15;
    
    reserved 16, 17, 18;
}

message ACLList {
    optional string owner = 1 [deprecated = true];
    optional string write = 2 [deprecated = true];
    optional string read = 3 [deprecated = true];
    optional LockServerWire_LockServiceACL lockservice_acl_owner = 7;
    repeated LockServerWire_LockServiceACL lockservice_acl_writers = 5;
    repeated LockServerWire_LockServiceACL lockservice_acl_readers = 6;
    
    reserved 4;
}

message ActionInfo {
    optional int64 time = 1;
    optional string who = 2;
    optional int64 session = 3;
    optional string host = 4;
    optional int64 pid = 5;
    optional string binary = 6;
    optional int64 handle = 7;
    optional int64 call_id = 9;
}

message OpenOptions {
    optional int32 open_mode = 1;
    optional int32 node_type = 2;
    optional int64 events = 3;
    optional string sequencer = 4;
    optional int64 lock_delay_ms = 5;
    optional string owner = 6;
    optional string write = 7;
    optional string read = 8;
    optional LockServerWire_LockServiceACL lockservice_acl_owner = 13;
    repeated LockServerWire_LockServiceACL lockservice_acl_writers = 11;
    repeated LockServerWire_LockServiceACL lockservice_acl_readers = 12;
    optional bytes contents = 9;
    
    reserved 10;
}

message WatcherData {
    optional bool exists = 2;
    optional bool last_seen_exists = 3;
    optional bytes contents = 4;
    optional int64 generation = 5;
    optional int64 errorcode = 6;
    optional int64 last_seen_errorcode = 7;
    optional Stat info = 8;
    repeated Stat stats = 9;
    optional bool updated = 10 [deprecated = true];
    optional string path = 11 [deprecated = true];
}

message Status {
    optional int32 code = 1;
    optional int32 errorcode = 2;
    optional string msg = 3;
}

message Request {
    optional Types which = 1;
    optional int64 seqno = 2;
    optional int64 handle = 3;
    optional string name = 4;
    optional OpenOptions options = 5;
    optional int64 count = 6;
    optional bytes buf = 7;
    optional int64 generation = 8;
    optional ACLList acls = 9;
    optional int64 locktype = 10;
    optional string sequencer = 11;
    optional OperationChecksums checksum = 13;
    
    reserved 12;
}

message Reply {
    optional Types which = 1;
    optional Status status = 2;
    optional int64 seqno = 3;
    optional int64 handle = 4;
    repeated Stat stat = 5;
    optional bytes buf = 6;
    optional string sequencer = 7;
    optional Version version = 8;
    optional OperationChecksums checksum = 9;
}

message EventReq {
    optional int64 handle = 1;
    optional int64 seqno = 2;
}

message EventResp {
    optional int64 handle = 1;
    optional int64 seqno = 2;
    optional EventCode code = 3;
    optional Stat stat = 4;
    optional Status status = 5;
}

message WatcherReq {
    optional Types which = 1;
    optional int64 handle = 2;
    optional int64 seqno = 3;
    optional string name = 4;
    optional string pattern = 5;
    optional bool user_data = 6;
    optional WatcherType w_type = 7;
}

message WatcherResp {
    optional Types which = 1;
    optional int64 handle = 2;
    optional WatcherData wdata = 3;
}

message Master {
    optional Types which = 1;
    optional int64 handle = 2;
    repeated string locks = 3;
    optional string sequencer = 4;
    optional int64 timeout_ms = 5;
    optional bool result = 6;
    optional int64 delay_ms = 7 [default = 0];
    optional bool reacquire = 8 [default = true];
    optional string contents = 9;
    optional string err = 10;
}

message VersionResponse {
    optional Version version = 1;
}

message WatchRequest {
    optional string filename = 1;
    optional bool recursive = 2 [default = false];
    optional string filter_regexp = 3;
    optional bool need_user_data = 4 [default = true];
    optional WatcherType type = 5 [default = Svelte];
}

message RecursiveWatcherData {
    optional RecursiveWatcherEventType type = 1;
    optional string relative_name = 2;
    optional Stat stat = 3;
}

message WatcherEvent {
    optional WatcherData data = 1;
    optional RecursiveWatcherData recursive_data = 2;
}

message FileHandle {
    optional fixed64 opaque_handle_contents = 1;
}

message Sequence {
    optional bytes opaque_sequence_contents = 1;
}

message OpenOptions2 {
    optional int32 open_mode = 1;
    optional int32 node_type = 2;
    optional NodeDurability node_durability = 10 [default = NORMAL];
    optional int64 events = 3;
    optional string sequencer = 4;
    optional int64 lock_delay_ms = 5;
    optional string owner = 6;
    optional string write = 7;
    optional string read = 8;
    optional LockServerWire_LockServiceACL lockservice_acl_owner = 14;
    repeated LockServerWire_LockServiceACL lockservice_acl_writers = 12;
    repeated LockServerWire_LockServiceACL lockservice_acl_readers = 13;
    optional bytes contents = 9;
    optional OperationChecksums checksum = 15;
    
    reserved 11;
}

message CreateContentsChecksumRequest {
    optional bytes contents = 1;
    optional int32 max_version = 2;
}

message CreateContentsChecksumResponse {
    optional Status status = 1;
    optional chubby.ChubbyChecksumData checksum = 2;
}

message OpenRequest {
    optional FileHandle parent = 1;
    optional string name = 2;
    optional OpenOptions2 options = 3;
    optional FileHandle old_handle = 4;
}

message Event {
    optional FileHandle handle = 1;
    optional Status status = 4;
    optional Stat stat = 2;
    optional EventCode event = 3;
    optional int64 generation = 5 [default = 0];
}

message SetContentsRequest {
    optional int64 old_generation = 3;
    optional bytes new_contents = 4;
    optional OperationChecksums checksum = 5;
    
    oneof identity {
        FileHandle handle = 1;
        string filename = 2;
    }
}

message SetContentsResponse {
    optional Status status = 1;
    optional Stat stat = 2;
}

message GetContentsRequest {
    oneof identity {
        FileHandle handle = 1;
        string filename = 2;
    }
}

message GetContentsResponse {
    optional Status status = 1;
    optional bytes contents = 2;
    optional Stat stat = 3;
}

message SetACLsRequest {
    optional ACLList acls = 3;
    optional int64 old_generation = 4;
    
    oneof identity {
        FileHandle handle = 1;
        string filename = 2;
    }
}

message SetACLsResponse {
    optional Status status = 1;
}

message LockRequest {
    optional FileHandle handle = 1;
    optional LockType type = 2;
    optional bool try = 3 [default = false];
    optional bool reacquire = 4 [default = false];
}

message LockResponse {
    optional Status status = 1;
}

message UnlockRequest {
    optional FileHandle handle = 1;
    optional LockType type = 2;
}

message UnlockResponse {
    optional Status status = 1;
}

message StatRequest {
    oneof identity {
        FileHandle handle = 1;
        string filename = 2;
    }
}

message StatResponse {
    optional Status status = 1;
    optional Stat stat = 2;
}

message ReadDirRequest {
    optional string from = 3;
    optional int32 max = 4;
    
    oneof identity {
        FileHandle handle = 1;
        string filename = 2;
    }
}

message ReadDirResponse {
    optional Status status = 1;
    repeated Stat stat = 2;
}

message DeleteRequest {
    oneof identity {
        FileHandle handle = 1;
        string filename = 2;
    }
}

message DeleteResponse {
    optional Status status = 1;
}

message GetSequenceRequest {
    optional FileHandle handle = 1;
    optional Sequence sequence = 2;
}

message GetSequenceResponse {
    optional Status status = 1;
    optional Sequence sequence = 2;
}

message SetSequenceRequest {
    optional FileHandle handle = 1;
    optional Sequence sequence = 2;
}

message SetSequenceResponse {
    optional Status status = 1;
}

message CheckSequenceRequest {
    optional Sequence sequence = 1;
    
    optional Sureness sureness = 3 [default = DEFAULT];
    enum Sureness {
        DEFAULT = 0;
        TRY_SURE = 16;
        MAKE_SURE = 1;
    }
    
    optional bool shared_ok = 4 [default = false];
    
    optional PinAction pin_action = 5 [default = NONE];
    enum PinAction {
        NONE = 0;
        PIN_SEQUENCER = 4;
        UNPIN_SEQUENCER = 8;
    }
}

message CheckSequenceResponse {
    optional Status status = 1;
    optional Sequence new_sequence = 2;
}

message PoisonRequest {
    optional FileHandle handle = 1;
}

message PoisonResponse {
    optional Status status = 1;
}

message CloseRequest {
    optional FileHandle handle = 1;
}

message CloseResponse {
    optional Status status = 1;
}

enum Version {
    ORIGINAL = 0;
    MAR_2014 = 1;
    OCT_2015 = 2;
}

enum WatcherType {
    option allow_alias = true;
    ABSTRACTLS = 0;
    Svelte = 0;
    LOCKSERV = 1;
    Lockservice = 1;
}

enum LockType {
    option allow_alias = true;
    kExclusive = 1;
    kShared = 2;
    kMaxSupported = 2;
    kTryExclusive = 3;
    kTryShared = 4;
    kTryReacquireExclusive = 5;
    kTryReacquireShared = 6;
    kReleaseExclusive = 7;
    kReleaseShared = 8;
}

enum OpenMode {
    kModeNoPermission = 0;
    kModeOwner = 1;
    kModeWrite = 2;
    kModeRead = 4;
    kModeCreate = 8;
    kModeMustNotExist = 16;
    kModeExpectNotExist = 32;
    kModeWeakConsistency = 64;
}

enum NodeType {
    kIsFile = 0;
    kIsDir = 1;
}

enum CheckSeq {
    kMakeSure = 1;
    kSharedOK = 2;
    kTrySure = 16;
    kPinSequencer = 4;
    kUnpinSequencer = 8;
}

enum EventCode {
    kConflicting = 0;
    kContents = 1;
    kHandleExpired = 2;
    kChildAdd = 3;
    kChildDelete = 4;
    kLockAcquisition = 5;
    kACLChange = 6;
    kDelete = 7;
    kFailover = 8;
    kInvalidate = 9;
    kJeopardy = 10;
    kChildContents = 11;
    kChildLockAcquisition = 12;
    kChildACLChange = 13;
    kSafe = 14;
    kInvalidateAll = 15;
    kLockRelease = 16;
    kChildLockRelease = 17;
    kInternalExpired = 1000;
    kInternalQueueFlushed = 1001;
}

enum RecursiveWatcherEventType {
    UPDATE_EVENT = 1;
    DELETE_EVENT = 2;
}

enum Types {
    STARTUP_REQ = 1;
    STARTUP_RESP = 2;
    CANON_CELL_NAME_REQ = 3;
    CANON_CELL_NAME_RESP = 4;
    OPEN_REQ = 5;
    OPEN_RESP = 6;
    STAT_REQ = 7;
    STAT_RESP = 8;
    VERSION_REQ = 9;
    VERSION_RESP = 10;
    READDIR_REQ = 11;
    READDIR_RESP = 12;
    GET_CONTENTS_STAT_REQ = 13;
    GET_CONTENTS_STAT_RESP = 14;
    SET_CONTENTS_REQ = 15;
    SET_CONTENTS_RESP = 16;
    DELETE_REQ = 17;
    DELETE_RESP = 18;
    SET_ACL_REQ = 19;
    SET_ACL_RESP = 20;
    LOCK_REQ = 21;
    LOCK_RESP = 22;
    GET_SEQUENCER_REQ = 25;
    GET_SEQUENCER_RESP = 26;
    SET_SEQUENCER_REQ = 27;
    SET_SEQUENCER_RESP = 28;
    CHECK_SEQUENCE_REQ = 29;
    CHECK_SEQUENCE_RESP = 30;
    INVALIDATE_SEQUENCER_REQ = 31;
    INVALIDATE_SEQUENCER_RESP = 32;
    INIT_CACHE_REQ = 33;
    INIT_CACHE_RESP = 34;
    POISON_REQ = 35;
    POISON_RESP = 36;
    CLOSE_REQ = 37;
    CLOSE_RESP = 38;
    VALID_REQ = 39;
    VALID_RESP = 40;
    W_ORPHAN_REQ = 41;
    W_ORPHAN_REQP = 42;
    W_DELETE_REQ = 43;
    W_DELETE_RESP = 44;
    W_SETUP_REQ = 45;
    W_SETUP_RESP = 46;
    W_GET_REQ = 47;
    W_GET_RESP = 48;
    W_RECURSIVE_REQ = 49;
    W_RECURSIVE_RESP = 50;
    W_REC_WAIT_REQ = 51;
    W_REC_WAIT_RESP = 52;
    M_CREATE = 53;
    M_START = 54;
    M_STOP = 55;
    M_WAIT = 56;
    M_ISMASTER = 57;
    M_ISPLAYING = 58;
    M_FORCE = 59;
    M_SEQUENCE = 60;
    M_RENEW = 61;
    M_CLOSE = 62;
    M_ID = 63;
    DELETE_TREE_REQ = 64;
    DELETE_TREE_RESP = 65;
    MAKE_PATH_REQ = 66;
    MAKE_PATH_RESP = 67;
    SET_LATENCY_CLASS_REQ = 68;
    SET_LATENCY_CLASS_RESP = 69;
    CREATE_CONTENTS_CHECKSUM_REQ = 70;
    CREATE_CONTENTS_CHECKSUM_RESP = 71;
    SET_CONTENTS_WITH_CHECKSUM_REQ = 72;
    SET_CONTENTS_WITH_CHECKSUM_RESP = 73;
}

enum NodeDurability {
    NORMAL = 0;
    READER_WRITER_EPHEMERAL = 1;
    WRITER_EPHEMERAL = 2;
}
