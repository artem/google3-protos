syntax = "proto2";

package security.credentials;

import "storage/datapol/annotations/proto/semantic_annotations.proto";

option cc_enable_arenas = true;
option java_package = "com.google.security.credentials";

message GaiaUserProto {
    required int64 user_id = 1;
}

message GaiaGroupProto {
    required int64 group_id = 1;
}

message LdapUserProto {
    required string user_name = 1;
}

message LdapGroupProto {
    required string group_name = 1;
}

message MdbUserProto {
    required string user_name = 1;
    optional int64 gaia_id = 2;
}

message MdbGroupProto {
    required string group_name = 1;
}

message PostiniUserProto {
    required int64 postini_user_id = 8;
}

message YoutubeUserProto {
    required int64 youtube_user_id = 1;
}

message ZwiebackSessionProto {
    optional fixed64 zwieback_session_id = 2;
}

message ContactGroupProto {
    required int64 owner_gaia_id = 1;
    required int64 group_id = 2;
    optional int64 required_consistency_timestamp_usec = 3;
}

message SimpleSecretLabelProto {
    optional SecretType type = 1;
    enum SecretType {
        INVALID = 0;
        AUTH_KEY = 1;
        INVITE = 2;
        GENERIC_SECRET = 3;
        CAP_TOKEN = 4;
        REKE = 5;
    }
    
    optional int64 invite_id = 2;
    optional bytes generic_label = 3;
    optional int32 capability_id = 4;
}

message SimpleSecretHolderProto {
    required SimpleSecretLabelProto label = 1;
}

message CapTokenHolderProto {
    optional bytes token_hmac_sha1_prefix = 1;
}

message SigningKeyPossessorProto {
    required int32 keymaster_key_type = 1;
    required bytes serialized_verification_key = 2;
    optional bytes serialized_verification_keyset = 3;
}

message AllAuthenticatedUsersProto {
    
}

message OAuthConsumerProto {
    required string domain = 1;
}

message HostProto {
    required string host_name = 1;
    optional string host_owner = 2;
}

message SocialGraphNodeProto {
    required string sgn_domain = 1;
    required string sgn_pk = 2;
}

message EmailOwnerProto {
    required string email = 1;
}

message CircleProto {
    optional int64 owner_gaia_id = 1;
    optional int64 circle_id = 2;
    optional int64 required_consistency_timestamp_usec = 3;
}

message SquareProto {
    optional int64 square_id = 1;
    optional int32 member_type = 2;
}

message EventProto {
    optional string event_id = 1;
    optional int32 member_type = 2;
}

message ChatProto {
    optional string chat_id = 1;
    optional int32 member_type = 2;
}

message ResourceRoleProto {
    optional string application_id = 1;
    optional string object_id = 2;
    optional string object_part = 4;
    optional int32 role_id = 3;
}

message RbacSubjectProto {
    optional string username = 1;
}

message RbacRoleProto {
    optional string rbac_namespace = 1 [deprecated = true];
    optional string name = 2 [deprecated = true];
    optional string object_id = 3 [deprecated = true];
    optional string rbac_role_name = 4;
}

message CloudPrincipalProto {
    optional string id = 1;
}

message PrincipalProto {
    optional PrincipalScope scope = 1;
    enum PrincipalScope {
        INVALID = 0;
        GAIA_USER = 1;
        GAIA_GROUP = 2;
        LDAP_USER = 3;
        LDAP_GROUP = 4;
        MDB_USER = 5;
        MDB_GROUP = 6;
        POSTINI_USER = 7;
        CONTACT_GROUP = 8;
        SIMPLE_SECRET_HOLDER = 9;
        SIGNING_KEY_POSSESSOR = 10;
        ALL_AUTHENTICATED_USERS = 11;
        OAUTH_CONSUMER = 12;
        HOST = 13;
        SOCIAL_GRAPH_NODE = 14;
        EMAIL_OWNER = 15;
        CAP_TOKEN_HOLDER = 16;
        CIRCLE = 17;
        SQUARE = 18;
        EVENT = 19;
        RESOURCE_ROLE = 20;
        CHAT = 21;
        YOUTUBE_USER = 22;
        UNUSED_ZWIEBACK_SESSION = 23 [deprecated = true];
        ZWIEBACK_SESSION = 25;
        RBAC_ROLE = 26;
        RBAC_SUBJECT = 27;
        CLOUD_PRINCIPAL = 28;
    }
    
    optional GaiaUserProto gaia_user = 2;
    optional GaiaGroupProto gaia_group = 3;
    optional LdapUserProto ldap_user = 4;
    optional LdapGroupProto ldap_group = 5;
    optional MdbUserProto mdb_user = 6;
    optional MdbGroupProto mdb_group = 7;
    optional PostiniUserProto postini_user = 8;
    optional ContactGroupProto contact_group = 9;
    optional SimpleSecretHolderProto simple_secret_holder = 10;
    optional SigningKeyPossessorProto signing_key_possessor = 11;
    optional AllAuthenticatedUsersProto all_authenticated_users = 12;
    optional OAuthConsumerProto oauth_consumer = 13;
    optional HostProto host = 14;
    optional SocialGraphNodeProto social_graph_node = 15;
    optional EmailOwnerProto email_owner = 16;
    optional CapTokenHolderProto cap_token_holder = 17;
    optional CircleProto circle = 18;
    optional SquareProto square = 19;
    optional EventProto event = 20;
    optional ResourceRoleProto resource_role = 21;
    optional ChatProto chat = 22;
    optional YoutubeUserProto youtube_user = 23;
    optional ZwiebackSessionProto zwieback_session = 25;
    optional RbacRoleProto rbac_role = 26;
    optional RbacSubjectProto rbac_subject = 27;
    optional CloudPrincipalProto cloud_principal = 28;
    
    reserved 24;
}

message UserProto {
    optional UserPrincipalScope scope = 1;
    enum UserPrincipalScope {
        INVALID = 0;
        GAIA_USER = 1;
        LDAP_USER = 3;
        MDB_USER = 5;
        OAUTH_CONSUMER = 12;
        ZWIEBACK_SESSION = 25;
    }
    
    oneof detail {
        GaiaUserProto gaia_user = 2;
        LdapUserProto ldap_user = 4;
        MdbUserProto mdb_user = 6;
        OAuthConsumerProto oauth_consumer = 13;
        ZwiebackSessionProto zwieback_session = 25;
    }
}

message UserPrincipalProto {
    optional UserProto internal_use_only = 1;
}

message PrincipalExpressionProto {
    repeated PrincipalDisjunction disjunctive_clause = 1;
    message PrincipalDisjunction {
        repeated PrincipalProto principal = 1;
    }
}
