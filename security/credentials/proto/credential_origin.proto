syntax = "proto2";

import "security/credentials/proto/principal.proto";
import "storage/datapol/annotations/proto/semantic_annotations.proto";
package security.credentials;

option java_package = "com.google.security.credentials";
option java_outer_classname = "CredentialOriginProtoFile";
option java_multiple_files = true;
option cc_enable_arenas = true;

message CredentialOrigin {
  message Cookie {
    optional string osid_domain = 1;
  }
  message OAuth {
    repeated int32 oauth_scope_code = 2;
    optional string client_id = 3;
    optional string native_app_name = 4;
    optional int64 package_id = 5;
  }
  message FirstPartyAuth {
  }
  message Password {
  }
  message ServiceTrustMint {
    optional string policy_name = 1;
    optional string loas_requester = 2;
  }
  message LoasRole {
    optional .security.credentials.MdbUserProto mdb_user = 1;
  }
  message ChildImpersonation {
    optional .security.credentials.CredentialOrigin credential_origin = 1;
  }
  message InternalSso {
    optional string user = 1;
    optional string domain = 2;
    optional string service_name = 3;
    repeated string member_group = 4;
  }
  message EnterpriseImpersonation {
    optional bytes real_authority = 1;
    optional .security.credentials.CredentialOrigin credential_origin = 2;
  }
  message PolicyBasedImpersonation {
    optional bytes real_authority = 1;
    optional .security.credentials.CredentialOrigin credential_origin = 2;
  }
  message DebugInfo {
    optional string original_requester_role = 1;
    optional string original_requester_info = 2;
  }
  enum AuthorityType {
    UNKNOWN_AUTHORITY = 0;
    USER_CREDENTIAL = 1;
    PROD_USER_CREDENTIAL = 4;
    INTERNAL_IMPERSONATION = 2;
    ENTERPRISE_IMPERSONATION = 3;
    CHILD_IMPERSONATION = 5;
  }
  oneof credential {
    .security.credentials.CredentialOrigin.Cookie cookie_info = 1;
    .security.credentials.CredentialOrigin.OAuth oauth_info = 2;
    .security.credentials.CredentialOrigin.FirstPartyAuth first_party_info = 3;
    .security.credentials.CredentialOrigin.Password password_info = 4;
    .security.credentials.CredentialOrigin.ServiceTrustMint service_trust_mint_info = 5;
    .security.credentials.CredentialOrigin.LoasRole loas_role_info = 6;
    .security.credentials.CredentialOrigin.InternalSso internal_sso_info = 7;
    .security.credentials.CredentialOrigin.EnterpriseImpersonation enterprise_impersonation_info = 8;
    .security.credentials.CredentialOrigin.PolicyBasedImpersonation policy_based_impersonation_info = 11;
    .security.credentials.CredentialOrigin.ChildImpersonation child_impersonation_info = 12;
  }
  optional .security.credentials.CredentialOrigin.AuthorityType authority_type = 9;
  optional .security.credentials.CredentialOrigin.DebugInfo debug_info = 13;
  optional .security.credentials.UserProto originator = 14;
}

