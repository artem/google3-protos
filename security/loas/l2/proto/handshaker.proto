syntax = "editions";

package security_loas_l2;

import "security/credentials/proto/principal.proto";
import "security/loas/l2/proto/common.proto";
import "util/task/codes.proto";

option java_package = "com.google.net.loas.l2";

message GetSupportedProtocolsReq {
    
}

message GetSupportedProtocolsResp {
    repeated string handshake_protocols = 1;
}

message GetSupportedHandshakeCiphersReq {
    
}

message GetSupportedHandshakeCiphersResp {
    repeated HandshakeCipher handshake_ciphers = 1;
}

message GetIdentitiesReq {
    optional bool reload_credentials = 1;
}

message GetIdentitiesResp {
    repeated Identity identities = 1;
    
    optional Status status = 2;
    message Status {
        optional util.error.Code code = 1;
        optional string message = 2;
    }
}

message GetDefaultRoleReq {
    
}

message GetDefaultRoleResp {
    optional security.credentials.PrincipalProto default_role = 1;
}

message NextProtocolKeySpec {
    optional string next_protocol = 1;
    optional bytes protocol_binding_info = 2;
    optional uint32 key_data_len = 3;
}

message StartClientHandshakeReq {
    optional string handshake_protocol = 1;
    repeated NextProtocolKeySpec key_specs = 2;
    optional Identity peer_identity = 3;
    optional security.credentials.PrincipalProto desired_role = 4;
    optional AuthenticatedOptions authenticated_options = 5;
    repeated bytes accepted_server_resumption_ticket_family_ids = 6;
    optional string peer_debug_info = 7;
    repeated HandshakeCipher handshake_cipher = 8;
    optional bool instance_info_required = 9;
    optional ConnectionType connection_type = 10;
    optional SelfSignedServerCertOption self_signed_server_cert = 11;
    repeated HandshakeCipher server_supported_ciphers = 12;
}

message StartServerHandshakeReq {
    optional string handshake_protocol = 1;
    repeated NextProtocolKeySpec key_specs = 2;
    optional bytes in_frames = 3;
    optional Identity peer_identity = 4;
    optional security.credentials.PrincipalProto desired_role = 5;
    optional AuthenticatedOptions authenticated_options = 6;
    optional string peer_debug_info = 7;
    repeated HandshakeCipher handshake_cipher = 8;
    optional bool instance_info_required = 9;
    optional ConnectionType connection_type = 10;
}

message ProcessNextHandshakeMessageReq {
    optional uint64 handshake_id = 1;
    optional bytes in_frames = 2;
}

message HandshakerResult {
    optional Identity peer_identity = 1;
    optional string next_protocol = 2;
    optional bytes key_data = 3;
    optional AuthenticatedOptions authenticated_options = 4;
    optional HandshakeCipher handshake_cipher = 5;
}

message HandshakerStatus {
    optional util.error.Code code = 1;
    optional string message = 2;
}

message HandshakerResp {
    optional uint64 handshake_id = 1;
    optional bytes out_frames = 2;
    optional HandshakerResult result = 3;
    repeated bytes accepted_server_resumption_ticket_family_ids = 4;
    optional HandshakerStatus status = 5;
}

enum SelfSignedServerCertOption {
    SELF_SIGNED_UNSPECIFIED = 0;
    SELF_SIGNED_DISALLOW = 1;
    SELF_SIGNED_ALLOW = 2;
    SELF_SIGNED_REQUIRE = 3;
}

enum ConnectionType {
    UNKNOWN_CONNECTION_TYPE = 0;
    TEST_CONNECTION_TYPE = 1;
    STUBBY_SECUREWRAPPER_CPP_CONNECTION_TYPE = 2;
    STUBBY_ENVELOPE_GO_CONNECTION_TYPE = 3;
    STUBBY_SECUREWRAPPER_SWIG_CONNECTION_TYPE = 4;
    GRPC_ALTS_CPP_CONNECTION_TYPE = 5;
    GRPC_LINKEDIN_JAVA_CONNECTION_TYPE = 6;
    GRPC_LINKEDIN_GO_CONNECTION_TYPE = 7;
    GRPC_ENVELOPE_JAVA_CONNECTION_TYPE = 8;
    GRPC_ENVELOPE_GO_CONNECTION_TYPE = 9;
    GRPC_MESSENGER_CPP_CONNECTION_TYPE = 10;
    GRPC_TSI_CPP_CONNECTION_TYPE = 11;
    BAMM2_CPP_CONNECTION_TYPE = 12;
}

enum RestartReason {
    UNKNOWN_RESTART_REASON = 0;
    MISSING_HANDSHAKE_PARAMETERS_RESTART_REASON = 1;
    CORRUPTED_TICKET_RESTART_REASON = 2;
}
