syntax = "editions";

package security_loas_l2;

import "google/protobuf/timestamp.proto";
import "security/loas/l2/proto/common.proto";
import "storage/datapol/annotations/proto/semantic_annotations.proto";

message Certificate {
    optional CertificateType certificate_type = 1;
    
    extensions 100 to max;
}

message ResumptionTicketKey {
    optional ResumptionTicketKeyType key_type = 1;
    enum ResumptionTicketKeyType {
        RESERVED = 0;
        TEST_KEY = 1;
        GOOGLE_AES128_CTR_SHA512_HMAC = 100;
    }
    
    extensions 100 to max;
}

message ResumptionTicket {
    optional uint32 version = 1;
    optional HandshakeCipher handshake_cipher = 2;
    optional Identity resumption_identity = 3;
    optional bytes resumption_secret = 4;
    optional string crl_state_id = 5;
    optional ResumptionTicketType resumption_ticket_type = 6;
    optional google.protobuf.Timestamp creation_time = 7;
}

message Alert {
    optional AlertType type = 1;
    enum AlertType {
        BAD_MESSAGE = 1;
        DESERIALIZATION_FAILED = 2;
        PROTOCOL_ERROR = 3;
        BAD_HANDSHAKECIPHER = 4;
        BAD_CERTIFICATE = 5;
        BAD_NEXTPROTOCOL = 6;
        BAD_TICKET = 7;
        BAD_AUTHENTICATOR = 8;
        INTERNAL_ERROR = 9;
        BAD_EPHEMERAL_PARAMETERS = 10;
        POLICY_CHECK_FAILURE = 11;
        POLICY_LOAD_FAILURE = 12;
        BAD_POST_QUANTUM_PARAMETERS = 13;
        SELF_SIGNED_CERTIFICATE_DISALLOWED = 14;
        SELF_SIGNED_CERTIFICATE_REQUIRED = 15;
        MISSING_HANDSHAKE_PARAMETERS = 16;
        RRCP_CHECK_FAILURE = 17;
        AUTHORIZATION_CHECK_FAILED = 18;
    }
    
    optional string error_message = 2;
}

message CachePerformance {
    optional Counter counter = 1;
    enum Counter {
        HIT = 1;
        MISS = 2;
        EXPIRED = 3;
    }
}

message EphemeralParameter {
    repeated HandshakeCipher handshake_ciphers = 1;
    optional bytes public_key = 2;
}

message PostQuantumParameter {
    repeated HandshakeCipher handshake_ciphers = 1;
    optional bytes public_key = 2;
}

message ClientInit {
    optional bytes random = 1;
    optional Certificate certificate = 2;
    repeated HandshakeCipher handshake_ciphers = 3;
    repeated string next_protocols = 4;
    repeated bytes accepted_client_resumption_ticket_family_ids = 5;
    optional AuthenticatedOptions authenticated_options = 6;
    
    repeated ServerResumptionTicketData server_resumption_tickets = 7;
    message ServerResumptionTicketData {
        optional bytes family_id = 1;
        optional bytes ticket = 2;
        repeated string supported_next_protocols = 3;
    }
    
    repeated EphemeralParameter ephemeral_parameters = 8;
    repeated PostQuantumParameter post_quantum_parameters = 9;
    
    extensions 100 to max;
}

message ServerInit {
    optional bytes random = 1;
    optional HandshakeCipher handshake_cipher = 2;
    optional string next_protocol = 3;
    optional Certificate certificate = 4;
    optional bytes client_resumption_ticket = 5;
    optional bytes client_resumption_ticket_family_id = 6;
    optional AuthenticatedOptions authenticated_options = 7;
    optional bytes server_resumption_ticket_family_id = 8;
    optional bytes server_ephemeral_public_key = 9;
    optional bytes post_quantum_public_keyshare = 10;
    optional bool has_only_self_signed = 11;
    
    extensions 100 to max;
}

message ServerFinished {
    optional bytes handshake_authenticator = 1;
    optional bytes new_server_resumption_ticket_family_id = 2;
    optional bytes encrypted_new_server_resumption_ticket = 3;
    
    extensions 100 to max;
}

message ClientFinished {
    optional bytes handshake_authenticator = 1;
    optional bytes new_client_resumption_ticket_family_id = 2;
    optional bytes encrypted_new_client_resumption_ticket = 3;
    
    extensions 100 to max;
}

enum CertificateType {
    UNSPECIFIED_CERTIFICATE = 0;
    TEST_CERTIFICATE = 1;
    THINMINT_CERTIFICATE = 100;
}

enum ResumptionTicketType {
    RESUMPTION_TICKET_TYPE_NONE = 0;
    RESUMPTION_TICKET_TYPE_HANDSHAKE_GENERATED = 1;
    RESUMPTION_TICKET_TYPE_SELF_GENERATED = 2;
}
