syntax = "proto2";

package security.keymaster;

import "google/protobuf/any.proto";
import "security/keymaster/keymaster.proto";
import "security/keymaster/tink.proto";
import "security/panoptikeys/crypto_key_params/crypto_key_params.proto";
import "storage/datapol/annotations/proto/semantic_annotations.proto";

option cc_enable_arenas = true;
option go_package = "keymaster";
option java_multiple_files = true;
option java_outer_classname = "UnusedKeyFormatOuterName";
option java_package = "com.google.security.keymaster";

message AesFormat {
    optional int32 symmetric_key_size_in_bits = 1;
}

message AesTetFormat {
    optional int32 symmetric_key_size_in_bits = 1;
    optional int32 signature_length_in_bytes = 2;
}

message TripleDesFormat {
    optional int32 symmetric_key_size_in_bits = 1;
}

message RsaFormat {
    optional int32 key_size_in_bits = 1;
    optional KeyMetadata.Type symmetric_type = 2;
}

message DsaFormat {
    optional int32 key_size_in_bits = 1;
}

message EcdsaFormat {
    optional KeyMetadata.EllipticCurve curve = 1;
}

message EciesFormat {
    optional KeyMetadata.EllipticCurve curve = 1;
    optional ECIESParameters parameters = 2;
}

message AesEcbFormat {
    optional int32 aes_key_size_bits = 1;
}

message AesWrappingFormat {
    optional int32 aes_wrapping_seed_size_bytes = 1;
}

message HmacFormat {
    optional int32 hmac_key_size_in_bits = 1;
    optional int32 hmac_signature_length_in_bytes = 2;
    optional URLParameters url_parameters = 3;
}

message ExtraEncryptionParam {
    required Type type = 1;
    enum Type {
        NONCE = 1;
        TWEAK = 2;
        WITH_DATA = 3;
    }
}

message KeyFormat {
    optional KeyMetadata.Type key_type = 1;
    optional KeyMetadata.HashAlgorithm hash_algorithm = 2;
    optional KeyMetadata.SignatureType signature_type = 3;
    optional AesFormat aes_format = 12;
    optional RsaFormat rsa_format = 13;
    optional DsaFormat dsa_format = 14;
    optional EcdsaFormat ecdsa_format = 15;
    optional AesTetFormat aes_tet_format = 18;
    optional EciesFormat ecies_format = 21;
    optional TripleDesFormat triple_des_format = 22;
    optional DerivationFormat derivation_format = 23;
    optional AesEcbFormat aes_ecb_format = 24;
    optional AesWrappingFormat legacy_aes_wrapping_format = 25;
    optional HmacFormat hmac_format = 30;
    optional KeyMetadata.PrfInputFormat prf_input_format = 31;
    optional ExtraEncryptionParam extra_encryption_param = 40;
    optional TinkKeyTemplate tink_key_template = 41;
    optional google.protobuf.Any tink_template = 42;
    optional OutputPrefixType tink_output_prefix = 43;
    
    extensions 1000 to max;
    
    reserved 16, 17, 19, 20;
}

message DerivationFormat {
    optional bool can_derive_deriving_key = 1 [default = false];
    optional bool can_derive_raw_bytes = 2 [default = false];
    optional KeyFormat crypt_key_format = 3;
    optional KeyFormat mac_key_format = 4;
    optional KeyFormat asymmetric_sign_key_format = 5;
    optional KeyFormat deterministic_crypt_key_format = 6;
}

message ReadableKeyTemplate {
    optional Usage intended_key_use = 1;
    enum Usage {
        SPECIAL_CASE = 0;
        LIMES_STANDARD_ENCRYPTED_DATA = 1;
    }
    
    optional KeyFormat key_format = 2;
}

message ReadableKeyTemplates {
    repeated ReadableKeyTemplate key_template = 1;
}
