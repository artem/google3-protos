syntax = "proto2";

package security;

import "security/panoptikeys/crypto_key_params/crypto_key_params.proto";
import "storage/datapol/annotations/proto/semantic_annotations.proto";

option cc_enable_arenas = true;
option java_package = "com.google.security.keymaster";

message KeyMetadata {
    required string name = 1;
    required int64 proto_spec_version = 3;
    
    required Purpose purpose = 4 [deprecated = true];
    enum Purpose {
        DECRYPT = 0;
        ENCRYPT = 3;
        SIGN = 1;
        VERIFY = 2;
        KEY_GENERATE = 4;
        WRAP = 5;
        GENERIC = 1000;
    }
    
    optional string keyfile_prefix = 5;
    
    repeated group Version = 6 {
        required int32 version = 7;
        required Status status = 8;
        optional string comment = 9;
        required bool hidden = 10 [deprecated = true];
        required bool production = 11 [deprecated = true];
        required Type type = 12;
        required int64 creation_time = 15;
        optional bool encrypted_key = 16;
    }
    
    optional string meta_comment = 13;
    required bytes integrity_hash = 14;
    optional int64 expiration_time = 17;
    
    enum SpecVersion {
        CURRENT_VERSION = 3;
    }
    
    enum Type {
        AES = 0;
        AES_CBC_RANDOMIV_HMAC = 32;
        AES_CBC_RANDOMIV_HMAC_WITHDATA = 33;
        AES_CTR = 17;
        AES_CTR_NO_AUTH = 60;
        AES_CTR_NO_AUTH_BROKEN = 57;
        AES_CTR_NONCE_HMAC = 38;
        AES_CTR_THEN_HMAC = 24;
        AES_ECB = 22;
        AES_IGE = 16;
        AES_TET = 25;
        AES_WRAPPING = 21;
        DES = 1;
        DSA = 6;
        ENCRYPTED_KEY = 39;
        HMAC_MD5 = 4;
        HMAC_SHA1 = 3;
        PUBLIC_DSA = 7;
        PUBLIC_RSA = 9;
        RSA = 8;
        RSA_CERT_SIGNING = 49;
        RSA_CERT_VERIFYING = 50;
        RSA_WRAPPING = 20;
        TEA = 5;
        TESTING = 15;
        TRIPLE_DES = 2;
        TWO_KEY_TRIPLE_DES_CBC_ZEROIV = 63;
        TWO_KEY_TRIPLE_DES_ECB = 73;
        THREE_KEY_TRIPLE_DES_ECB = 74;
        PORTUNUS_AES = 46;
        PORTUNUS_DSA = 44;
        PORTUNUS_ECDSA = 48;
        PORTUNUS_RSA = 43;
        PORTUNUS_RSA_SIGNING = 42;
        UNKNOWN = 62;
        HMAC_SHA1_TRUNCATED = 23;
        HMAC_SHA256_TRUNCATED = 34;
        HMAC_SHA512_TRUNCATED = 35;
        HMAC_SHA256_HALF_DIGEST = 70;
        GMAC = 86;
        HMAC_SHA1_ATTACHED = 113;
        HMAC_SHA256_ATTACHED = 114;
        HMAC_SHA256_HALF_SIZE_TAG_ATTACHED = 115;
        HMAC_SHA512_ATTACHED = 116;
        HMAC_SHA512_HALF_SIZE_TAG_ATTACHED = 117;
        TINK_HMAC = 87;
        AES_CTR_RANDOM16BYTEIV_HMAC = 55;
        AES_CTR_RANDOM16BYTEIV_HMAC_WITHDATA = 56;
        AES_128_GCM = 58;
        AES_256_GCM = 59;
        AES_128_EAX = 83;
        AES_256_EAX = 84;
        AES_256_GCM_SIV = 85;
        TINK_XCHACHA20_POLY1305 = 88;
        TINK_AES_CTR_HMAC_AEAD = 89;
        TINK_AES_GCM_AEAD = 95;
        TINK_AES_SIV_CMAC = 90;
        AES_CTR_RANDOMIV_HMAC = 36;
        AES_CTR_RANDOMIV_HMAC_WITHDATA = 37;
        AES_CTR_SIV_HMAC = 40;
        AES_CTR_SIV_HMAC_WITHTWEAK = 41;
        AES_EAX_RANDOMIV = 47;
        ECDSA_SIGNING = 28;
        ECDSA_VERIFYING = 29;
        RSA_SIGNING = 18;
        RSA_VERIFYING = 19;
        P256_ECDSA_SIGNING = 64;
        P256_ECDSA_VERIFYING = 65;
        ED25519_SIGNING = 71;
        ED25519_VERIFYING = 72;
        P256_ECDSA_JWT_SIGNING = 77;
        P256_ECDSA_JWT_VERIFYING = 78;
        P384_ECDSA_SIGNING = 105;
        P384_ECDSA_VERIFYING = 106;
        P521_ECDSA_SIGNING = 103;
        P521_ECDSA_VERIFYING = 104;
        RSA_2048_SIGNING = 79;
        RSA_2048_VERIFYING = 80;
        RSA_2048_PSS_SIGNING = 81;
        RSA_2048_PSS_VERIFYING = 82;
        RSA_4096_PSS_SHA256_SIGNING = 109;
        RSA_4096_PSS_SHA256_VERIFYING = 110;
        RSA_4096_PSS_SHA512_SIGNING = 99;
        RSA_4096_PSS_SHA512_VERIFYING = 100;
        RSA_3072_PSS_SHA384_SIGNING = 101;
        RSA_3072_PSS_SHA384_VERIFYING = 102;
        RSA_2048_PKCS1_SHA256_ATTACHED_SIGNING = 111;
        RSA_2048_PKCS1_SHA256_ATTACHED_VERIFYING = 112;
        RSA_4096_PKCS1_SHA256_ATTACHED_SIGNING = 118;
        RSA_4096_PKCS1_SHA256_ATTACHED_VERIFYING = 119;
        TINK_ECDSA_SIGNING = 91;
        TINK_ECDSA_VERIFYING = 92;
        ECIES_PRIVATE = 52;
        ECIES_PUBLIC = 51;
        HYBRID_PUBLIC_RSA = 27;
        HYBRID_RSA = 26;
        HYBRID_P256_AES_256_GCM_PUBLIC = 66;
        HYBRID_P256_AES_256_GCM_PRIVATE = 67;
        HYBRID_X25519_AES_256_GCM_PUBLIC = 68;
        HYBRID_X25519_AES_256_GCM_PRIVATE = 69;
        HYBRID_P256_AES_128_GCM_PUBLIC = 75;
        HYBRID_P256_AES_128_GCM_PRIVATE = 76;
        TINK_ECIES_AEAD_HKDF_PUBLIC = 93;
        TINK_ECIES_AEAD_HKDF_PRIVATE = 94;
        AEP_ECDSA = 54;
        AEP_RSA_SIGNING = 53;
        NFAST_AES = 10;
        NFAST_DSA = 12;
        NFAST_HMAC_SHA1 = 11;
        NFAST_PUBLIC_RSA = 14;
        NFAST_RSA = 13;
        NFAST_TRIPLE_DES = 45;
        HMAC_SHA1_PRF_CTR = 30;
        HMAC_SHA256_PRF_CTR = 31;
        HKDF_SHA512 = 61;
        TINK = 96;
        VU13P_FPGA_RSA_SIGNING = 97;
        VU13P_FPGA_RSA_VERIFYING = 98;
        AVENGER_IOC_RSA_SIGNING = 107;
        AVENGER_IOC_RSA_VERIFYING = 108;
    }
    
    enum Status {
        PRIMARY = 0;
        ACTIVE = 1;
        SCHEDULED_FOR_REVOCATION = 2;
    }
    
    enum HashAlgorithm {
        SHA1 = 0;
        SHA224 = 1;
        SHA256 = 2;
        SHA384 = 4;
        SHA512 = 3;
        USE_DEFAULT_HASH_ALGORITHM = 100;
        NO_HASH_ALGORITHM = 101;
    }
    
    enum SignatureType {
        SIG_UNKNOWN = 0;
        SIG = 1;
        SIG_WITHHIDDEN_ATTACHED = 2;
        SIG_WITHTIMEOUT = 3;
        SIG_RAW = 4;
        SIG_URL = 5;
        SIG_WITHTIMESTAMP = 6;
    }
    
    enum EllipticCurve {
        NIST_P224 = 1;
        NIST_P256 = 2;
        NIST_P384 = 3;
        NIST_P521 = 4;
    }
    
    enum EcPointFormat {
        X509_SPKI_UNCOMPRESSED = 0;
        POINT_UNCOMPRESSED = 1;
        POINT_COMPRESSED = 2;
    }
    
    enum PrfInputFormat {
        NIST_800_108_KDF_CTR = 0;
    }
}

message URLParameters {
    repeated string name = 1;
}

message Key {
    optional bytes random_bits = 1 [ctype = STRING_PIECE];
    required bytes key_material = 2 [ctype = STRING_PIECE];
    optional URLParameters url_parameters = 3;
    optional int32 hmac_signature_length = 4;
    optional KeyMetadata.SignatureType signature_type = 5 [default = SIG_UNKNOWN];
}

message PrfKey {
    optional bytes seed = 1;
    optional KeyMetadata.PrfInputFormat input_format = 2;
}

message SymmetricKey {
    required KeyMetadata.Type type = 1;
    required bytes symmetric_key = 2 [ctype = STRING_PIECE];
    required bytes hmac_key = 3 [ctype = STRING_PIECE];
    optional int32 hmac_signature_length = 4;
}

message WeakSymmetricKey {
    required bytes symmetric_key = 1;
}

message AuthenticatingSymmetricKey {
    optional bytes symmetric_key = 1;
    
    reserved 2;
}

message TetKey {
    required PaddingType padding = 1;
    enum PaddingType {
        PKCS5_PADDING = 0;
    }
    
    required bytes symmetric_key = 2;
    required int32 signature_length = 3;
}

message RSAPublicKey {
    required bytes modulus = 1;
    required bytes public_exponent = 2;
    optional KeyMetadata.HashAlgorithm hash = 3 [default = SHA1];
    optional KeyMetadata.SignatureType signature_type = 4 [default = SIG_UNKNOWN];
}

message RSAPrivateKey {
    required RSAPublicKey public_key = 1;
    required bytes private_exponent = 2 [ctype = STRING_PIECE];
    optional bytes facp = 3 [ctype = STRING_PIECE];
    optional bytes q = 4 [ctype = STRING_PIECE];
    optional bytes dmp1 = 5 [ctype = STRING_PIECE];
    optional bytes dmq1 = 6 [ctype = STRING_PIECE];
    optional bytes iqmp = 7 [ctype = STRING_PIECE];
}

message DSAPublicKey {
    required bytes p = 1;
    required bytes q = 2;
    required bytes g = 3;
    required bytes public_key = 4;
    optional KeyMetadata.SignatureType signature_type = 5 [default = SIG_UNKNOWN];
    optional KeyMetadata.HashAlgorithm hash = 6 [default = USE_DEFAULT_HASH_ALGORITHM];
}

message DSAPrivateKey {
    required DSAPublicKey public_key = 1;
    required bytes private_key = 2;
}

message ECPublicKey {
    required KeyMetadata.EllipticCurve curve = 1;
    required bytes x = 2;
    required bytes y = 3;
    optional KeyMetadata.SignatureType signature_type = 4 [default = SIG_UNKNOWN];
}

message ECPrivateKey {
    required ECPublicKey public_key = 1;
    required bytes private_key = 2;
}

message ECIESParameters {
    optional KeyMetadata.EcPointFormat point_format = 1;
    optional KeyMetadata.Type prf_type = 2;
    optional KeyMetadata.PrfInputFormat prf_input_format = 3;
    
    optional DataEncapsulationMechanismFormat dem_format = 4;
    enum DataEncapsulationMechanismFormat {
        KEYMASTER_PERMUTE = 0;
        KEYMASTER_PERMUTE_V2 = 1;
    }
    
    optional KeyMetadata.Type symmetric_type = 5;
    optional int32 symmetric_key_size_in_bytes = 6;
    optional KeyMetadata.HashAlgorithm hash_algorithm = 7;
    optional int32 mac_key_size_in_bytes = 8;
    optional int32 mac_digest_size_in_bytes = 9;
}

message ECIESPublicKey {
    optional ECPublicKey public_key = 1;
    optional ECIESParameters parameters = 2;
}

message ECIESPrivateKey {
    optional ECPrivateKey private_key = 1;
    optional ECIESParameters parameters = 2;
}

message SessionMaterial {
    required SymmetricKey key = 1;
    required bytes nonce = 2;
}

message NFastMappedKey {
    required bytes keystore_hash = 1;
    required string key_alias = 2;
    optional string keystore_name = 3;
    optional string keystore_password = 4;
}

message NFastHmacKey {
    required NFastMappedKey key = 1;
    optional URLParameters url_parameters = 2;
}

message NFastSymmetricKey {
    required NFastMappedKey key = 1;
    required Key hmac_key = 2;
}

message HybridKey {
    required EncodingMethod encoding_method = 1;
    enum EncodingMethod {
        GENERIC_WRAPPING = 0;
    }
    
    required bytes kem_key = 2;
    required KeyMetadata.Type symmetric_type = 3;
}

message StreamParameters {
    required int32 ciphertext_chunk_size = 1;
}

message EncryptedKey {
    required bytes encrypted_protocol_buffer = 1;
    required bytes plaintext_key_hash = 2;
}

message SerializedReader {
    required bytes serialized_metadata = 2;
    repeated bytes serialized_key = 1 [ctype = STRING_PIECE];
}

message KeyTemplateProto {
    optional KeyMetadata.Type type = 2;
    optional bytes template = 3;
}
