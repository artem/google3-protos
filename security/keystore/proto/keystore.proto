syntax = "proto2";

package security.keystore;

import "devtools/protoshop/public/parsing_options/parsing_options.proto";
import "frameworks/testing/rpcreplay/processors/rpc_replay_field_option.proto";
import "net/proto2/bridge/proto/message_set.proto";
import "net/proto2/proto/descriptor.proto";
import "security/credentials/proto/principal.proto";
import "security/keymaster/keymaster.proto";
import "security/keystore/proto/keystore_client_key.proto";
import "storage/datapol/annotations/proto/semantic_annotations.proto";
import "util/task/codes.proto";
import "util/task/status.proto";

option cc_enable_arenas = true;
option java_multiple_files = true;
option java_outer_classname = "KeystoreProtoFile";
option java_package = "com.google.security.keystore.proto";

service Keystore {
    rpc EncryptKey(EncryptKeyRequest) returns (EncryptKeyReply);
    rpc GetMasterOrServiceKeyKeyMetadata(MasterOrServiceKeyKeyMetadataRequest) returns (KeyMetadataReply);
    rpc ProcessServiceKey(KeyRequestParameters) returns (ProcessedKey);
    rpc ProcessLiteralKey(KeyRequestParameters) returns (ProcessedKey);
    rpc ProcessDerivedKey(KeyRequestParameters) returns (ProcessedKey);
    rpc ProcessWrappedKey(KeyRequestParameters) returns (ProcessedKey);
    rpc Refresh(RefreshRequest) returns (ProcessedKey);
    rpc ValidateWrappedKey(ValidateWrappedKeyRequest) returns (ValidateWrappedKeyReply);
}

message KeystoreEnums {
    enum Environment {
        ENVIRONMENT_UNSPECIFIED = 0;
        PROD = 1;
        DEV = 2;
        ROOT = 3;
        TEST_ROOT = 4;
    }
    
    enum ErrorCode {
        OK = 0;
        BAD_SECURITY_LEVEL = 1;
        INVALID_KEYSTORE_CONFIG_ID = 2;
        INVALID_LOAS_ID = 3;
        USER_AUTH_ERROR = 4;
        EXPIRED_AUTH_ERROR = 12;
        USER_NOT_AUTHORIZED = 16;
        AUTH_INVALID = 20;
        UNSUPPORTED_AUTH_ERROR = 19;
        UNKNOWN_KEY_NAME = 5;
        INVALID_KEY_PURPOSE = 6;
        WRONG_OR_MISSING_PARAMETER = 7;
        INVALID_WRAPPED_KEY = 8;
        INVITATION_ERROR = 11;
        GENERAL_PERMANENT_ERROR = 18;
        CLIENT_REALM_NOT_AUTHORIZED = 24;
        DARK_LAUNCH_RESPONSE_COMPARISON_ERROR = 25;
        BYOC_KEY_TOO_FAR_BEHIND = 26;
        INVALID_CLIENT = 30;
        GENERAL_KEYSTORE_ERROR = 9;
        GENERAL_RPC_EXCEPTION = 10;
        BACKEND_RPC_ERROR = 17;
        UBER_MASTER_KEY_UNAVAILABLE = 15;
        THROTTLED = 14;
        THROTTLED_TASK_LIMIT = 27;
        THROTTLED_OVERLOADED = 28;
        CORRUPTION_DETECTED = 21;
        SERVER_DEADLINE_EXCEEDED = 22;
        CONFIG_VERSION_UNAVAILABLE = 23;
        CANCELLED = 29;
    }
    
    enum DefaultBackendSubsetSize {
        DEFAULT_BACKEND_SUBSET_SIZE = 10;
        LATENCY_TOLERANT_BACKEND_SUBSET_SIZE = 5;
    }
    
    enum KeyUse {
        SERVICE_KEY = 0;
        MASTER_KEY = 1;
        REMOTE_SIGNING_KEY = 2;
        SEALING_KEY = 3;
    }
}

message APISource {
    optional AutoRefreshSourcePath auto_refresh_library_path = 1;
    enum AutoRefreshSourcePath {
        NON_AUTO_REFRESH_DEFAULT = 0;
        KEYMASTER_CPP = 1;
        KEYMASTER_JAVA = 2;
        KEYMASTER_PYTHON = 3;
        TINK_CPP = 4;
        GOOPS_CRYPTER = 5;
    }
}

message ClientInfo {
    optional int64 keystore_client_version = 1;
    optional int64 client_baseline_changelist = 2;
    optional string binary_name = 3;
    optional APISource api_source = 5;
    
    optional Language language = 6;
    enum Language {
        UNSPECIFIED = 0;
        CPP = 1;
        JAVA = 2;
        PYTHON = 3;
        GO = 4;
    }
    
    reserved 4;
    
    extend .proto2.bridge.MessageSet {
        optional ClientInfo message_set_extension = 207273119;
    }
}

message KeyMetadataReply {
    optional KeyMetadata key_metadata = 1;
    optional string key_hash_string = 2;
    optional string extended_key_hash_string = 3;
    optional string wrapping_extended_key_hash_string = 7;
    optional int32 max_client_generated_version = 4;
    optional string ubermaster_realm = 8;
    optional bool colossus_encryption = 9;
    optional util.StatusProto error_status = 6;
    
    reserved 5;
}

message EncryptKeyRequest {
    optional int64 keystore_client_version = 4;
    required int32 keystore_config_id = 2;
    optional LiteralKey key = 5;
    required KeystoreEnums.KeyUse use = 3;
    optional string security_realm = 6;
    
    reserved 1;
}

message EncryptKeyReply {
    optional bytes encrypted_key_material = 3;
    
    reserved 1, 2, 4;
}

message MasterOrServiceKeyKeyMetadataRequest {
    required int32 keystore_config_id = 1;
    optional int64 keystore_client_version = 3;
    required KeystoreEnums.KeyUse use = 4;
    required string key_name = 2;
    optional ClientKey client_key = 6;
    repeated KeystoreEnums.ErrorCode accepted_error_code = 5;
}

message DocumentScope {
    required int64 scope_id = 1;
}

message DocumentId {
    oneof document_id {
        string document_id_string = 1;
        int64 document_id_int = 2;
    }
}

message LiteralKey {
    optional SerializedReader serialized_reader = 1;
    optional bytes raw_key = 2;
    optional uint64 checksum = 4;
    optional fixed32 salt = 5;
    
    reserved 3;
}

message AppAttribute {
    required bytes name = 1;
    required bytes value = 2;
}

message WrappedKeyParams {
    required string master_key_name = 1;
    repeated credentials.PrincipalProto principal = 4;
    optional credentials.PrincipalExpressionProto principal_expression = 5;
    optional DocumentId document_id = 6;
    optional DocumentScope document_scope = 10;
    optional int64 start_time_in_millis = 11;
    optional int64 expiry_time_in_millis = 7;
    
    repeated Attribute attribute = 9;
    message Attribute {
        required bytes name = 1;
        required bytes value = 2;
    }
    
    repeated AppAttribute app_attribute = 8;
    
    optional WrapMode wrap_mode = 13;
    enum WrapMode {
        DEFAULT = 0;
        WRAPPED_KEY_ONLY = 1;
        WITH_PLAINTEXT_METADATA = 2;
        WITH_PLAINTEXT_METADATA_IF_SUPPORTED = 3;
    }
    
    optional string sealed_key_id = 14;
    
    reserved 12;
}

message LiteralKeyParams {
    
}

message KeyRequestParameters {
    required int32 keystore_config_id = 1;
    optional ClientKey input_phase_client_key = 13;
    optional ClientKey output_phase_client_key = 14;
    optional int64 keystore_client_version = 9;
    optional string binary_name = 8;
    optional KeyMetadata.Purpose purpose = 3;
    
    required KeySpec key_spec = 4;
    message KeySpec {
        optional ServiceKeySpec service_key_spec = 1;
        optional LiteralKeySpec literal_key_spec = 2;
        optional DerivedKeySpec derived_key_spec = 3;
        optional WrappedKeySpec wrapped_key_spec = 4;
    }
    
    optional LiteralKeyParams literal_key_params = 5;
    optional WrappedKeyParams wrapped_key_params = 6;
    optional DesiredMetadata desired_metadata = 12;
    repeated KeystoreEnums.ErrorCode accepted_error_code = 11;
    optional uint64 originating_rpc_request_id = 15;
    
    reserved 7, 10;
    
    message ServiceKeySpec {
        required string service_key_name = 1;
    }
    
    message LiteralKeySpec {
        required LiteralKey key = 1;
    }
    
    message DerivedKeySpec {
        required KeyTemplate derived_key_template = 1;
        message KeyTemplate {
            oneof template {
                KeymasterKeyTemplate keymaster_key_template = 1;
                RawKeyTemplate raw_key_template = 2;
            }
            
            reserved 3;
            
            message KeymasterKeyTemplate {
                optional KeyMetadata.Type type = 2;
            }
            
            message RawKeyTemplate {
                required int32 length = 1;
            }
        }
        
        required string master_key_name = 2;
        
        required DerivationSeeds derivation_seeds = 3;
        message DerivationSeeds {
            optional credentials.PrincipalProto principal = 1;
            optional credentials.PrincipalExpressionProto principal_expression = 5;
            repeated bytes key_seed = 2;
            optional DocumentId document_id = 3;
            optional DocumentScope document_scope = 4;
        }
    }
    
    message WrappedKeySpec {
        required WrappedKeyParams wrapped_key_params = 1;
        required bytes wrapped_key = 2;
        
        reserved 3;
    }
}

message KeyInputMetadata {
    optional credentials.PrincipalProto wrapped_key_creator = 1;
    optional DocumentId document_id = 5;
    repeated AppAttribute app_attribute = 8;
    
    reserved 2, 3, 4, 7, 9, 10, 11;
}

message KeyOutputMetadata {
    optional bytes wrapping_master_key_version_hash = 1;
    optional int32 wrapping_master_key_version_number = 2;
    optional WrappedKeyParams.WrapMode wrapped_key_format = 3;
    optional fixed32 wrapped_key_crc32c = 7;
}

message DesiredMetadata {
    optional bool wrapping_master_key_version_hash = 1;
    optional bool wrapping_master_key_version_number = 2;
    optional bool wrapped_key_format = 4;
    optional bool wrapped_key_crc32c = 5;
    
    reserved 3;
}

message WrappedKeyMetadata {
    repeated credentials.PrincipalProto principal = 1;
    optional DocumentId document_id = 2;
    optional DocumentScope document_scope = 3;
    optional int64 start_time_in_millis = 4;
    optional int64 expiry_time_in_millis = 5;
    optional string sealed_key_id = 8;
    optional int32 wrapping_version_placeholder = 7;
    optional string security_realm = 6;
}

message WrappedKeyWithMetadata {
    optional bytes wrapped_key_ciphertext = 1;
    optional bytes wrapped_key_metadata = 2;
}

message ProcessedKey {
    optional util.StatusProto error_status = 6;
    optional LiteralKey literal_key = 1;
    optional bytes wrapped_key = 2;
    
    optional ValidationMode server_requested_validation_mode = 8;
    enum ValidationMode {
        NONE = 0;
        AUDIT = 1;
        VALIDATE = 2;
    }
    
    optional CryptoMonitoringMode server_requested_monitoring_mode = 9;
    enum CryptoMonitoringMode {
        MONITORING_UNSPECIFIED = 0;
        COLLECT_AND_PUBLISH = 1;
        DISABLE_PUBLISH = 2;
    }
    
    map<string, string> additional_crypto_monitoring_annotations = 10;
    optional KeyInputMetadata key_input_metadata = 3;
    optional KeyOutputMetadata key_output_metadata = 5;
    
    reserved 4, 7, 16;
}

message RefreshRequest {
    optional int32 keystore_config_id = 1;
    optional int64 keystore_client_version = 2;
    optional string binary_name = 3;
    optional string master_key_name = 4;
    optional bytes wrapped_key = 5;
    optional DesiredMetadata desired_metadata = 6;
    optional ClientKey client_key = 7;
    optional WrappedKeyParams.WrapMode wrap_mode = 8;
}

message ValidateWrappedKeyRequest {
    optional ClientInfo client_info = 1;
    optional int32 keystore_config_id = 2;
    optional string master_key_name = 3;
    optional bytes wrapped_key = 4;
    optional uint64 originating_rpc_request_id = 7;
    optional ClientKey client_key = 8;
    
    oneof comparison_token {
        LiteralKey literal_key = 5;
        bytes wrapped_key_comparison_token = 6;
    }
}

message ValidateWrappedKeyReply {
    
}

extend .proto2.EnumValueOptions {
    optional bool is_retriable = 48888244 [default = false];
    optional util.error.Code canonical_code = 61258612 [default = UNKNOWN];
}
