syntax = "proto2";

import "storage/onestore/v3/document.proto";
package apphosting;

option java_package = "com.google.appengine.api.search";
option java_outer_classname = "SearchServicePb";

message SearchServiceError {
  enum ErrorCode {
    OK = 0;
    INVALID_REQUEST = 1;
    TRANSIENT_ERROR = 2;
    INTERNAL_ERROR = 3;
    PERMISSION_DENIED = 4;
    TIMEOUT = 5;
    CONCURRENT_TRANSACTION = 6;
  }
}

message RequestStatus {
  required .apphosting.SearchServiceError.ErrorCode code = 1;
  optional string error_detail = 2;
  optional int32 canonical_code = 3;
}

message IndexSpec {
  enum Consistency {
    GLOBAL = 0;
    PER_DOCUMENT = 1;
  }
  enum Source {
    SEARCH = 0;
    DATASTORE = 1;
    CLOUD_STORAGE = 2;
  }
  enum Mode {
    PRIORITY = 0;
    BACKGROUND = 1;
  }
  required string name = 1;
  optional .apphosting.IndexSpec.Consistency consistency = 2 [default = PER_DOCUMENT];
  optional string namespace = 3;
  optional int32 version = 4;
  optional .apphosting.IndexSpec.Source source = 5 [default = SEARCH];
  optional .apphosting.IndexSpec.Mode mode = 6 [default = PRIORITY];
}

message IndexMetadata {
  message Storage {
    optional int64 amount_used = 1;
    optional int64 limit = 2;
  }
  enum IndexState {
    ACTIVE = 0;
    SOFT_DELETED = 1;
    PURGING = 2;
  }
  required .apphosting.IndexSpec index_spec = 1;
  repeated .storage_onestore_v3.FieldTypes field = 2;
  optional .apphosting.IndexMetadata.Storage storage = 3;
  optional .apphosting.IndexMetadata.IndexState index_state = 4 [default = ACTIVE];
  optional int64 index_delete_time = 5;
}

message IndexDocumentParams {
  enum Freshness {
    SYNCHRONOUSLY = 0;
    WHEN_CONVENIENT = 1;
  }
  repeated .storage_onestore_v3.Document document = 1;
  optional .apphosting.IndexDocumentParams.Freshness freshness = 2 [default = SYNCHRONOUSLY, deprecated = true];
  required .apphosting.IndexSpec index_spec = 3;
}

message IndexDocumentRequest {
  required .apphosting.IndexDocumentParams params = 1;
  optional bytes app_id = 3;
}

message IndexDocumentResponse {
  repeated .apphosting.RequestStatus status = 1;
  repeated string doc_id = 2;
}

message DeleteDocumentParams {
  repeated string doc_id = 1;
  required .apphosting.IndexSpec index_spec = 2;
}

message DeleteDocumentRequest {
  required .apphosting.DeleteDocumentParams params = 1;
  optional bytes app_id = 3;
}

message DeleteDocumentResponse {
  repeated .apphosting.RequestStatus status = 1;
}

message ListDocumentsParams {
  required .apphosting.IndexSpec index_spec = 1;
  optional string start_doc_id = 2;
  optional bool include_start_doc = 3 [default = true];
  optional int32 limit = 4 [default = 100];
  optional bool keys_only = 5;
}

message ListDocumentsRequest {
  required .apphosting.ListDocumentsParams params = 1;
  optional bytes app_id = 2;
}

message ListDocumentsResponse {
  required .apphosting.RequestStatus status = 1;
  repeated .storage_onestore_v3.Document document = 2;
}

message DeleteIndexParams {
  required .apphosting.IndexSpec index_spec = 1;
}

message DeleteIndexRequest {
  required .apphosting.DeleteIndexParams params = 1;
  optional bytes app_id = 2;
}

message DeleteIndexResponse {
  required .apphosting.RequestStatus status = 1;
}

message CancelDeleteIndexParams {
  required .apphosting.IndexSpec index_spec = 1;
}

message CancelDeleteIndexRequest {
  required .apphosting.CancelDeleteIndexParams params = 1;
  optional bytes app_id = 2;
}

message CancelDeleteIndexResponse {
  required .apphosting.RequestStatus status = 1;
}

message ListIndexesParams {
  optional bool fetch_schema = 1;
  optional int32 limit = 2 [default = 20];
  optional string namespace = 3;
  optional string start_index_name = 4;
  optional bool include_start_index = 5 [default = true];
  optional string index_name_prefix = 6;
  optional int32 offset = 7;
  optional .apphosting.IndexSpec.Source source = 8 [default = SEARCH];
}

message ListIndexesRequest {
  required .apphosting.ListIndexesParams params = 1;
  optional bytes app_id = 3;
}

message ListIndexesResponse {
  required .apphosting.RequestStatus status = 1;
  repeated .apphosting.IndexMetadata index_metadata = 2;
}

message DeleteSchemaParams {
  optional .apphosting.IndexSpec.Source source = 1 [default = SEARCH];
  repeated .apphosting.IndexSpec index_spec = 2;
}

message DeleteSchemaRequest {
  required .apphosting.DeleteSchemaParams params = 1;
  optional bytes app_id = 3;
}

message DeleteSchemaResponse {
  repeated .apphosting.RequestStatus status = 1;
}

message SortSpec {
  required string sort_expression = 1;
  optional bool sort_descending = 2 [default = true];
  optional string default_value_text = 4;
  optional double default_value_numeric = 5;
}

message ScorerSpec {
  enum Scorer {
    RESCORING_MATCH_SCORER = 0;
    MATCH_SCORER = 2;
  }
  optional .apphosting.ScorerSpec.Scorer scorer = 1 [default = MATCH_SCORER];
  optional int32 limit = 2 [default = 1000];
  optional string match_scorer_parameters = 9;
}

message FieldSpec {
  repeated string name = 1;
  repeated group Expression = 2 {
    required string name = 3;
    required string expression = 4;
  }
}

message FacetRange {
  optional string name = 1;
  optional string start = 2;
  optional string end = 3;
}

message FacetRequestParam {
  optional int32 value_limit = 1;
  repeated .apphosting.FacetRange range = 2;
  repeated string value_constraint = 3;
}

message FacetAutoDetectParam {
  optional int32 value_limit = 1 [default = 10];
}

message FacetRequest {
  required string name = 1;
  optional .apphosting.FacetRequestParam params = 2;
}

message FacetRefinement {
  message Range {
    optional string start = 1;
    optional string end = 2;
  }
  required string name = 1;
  optional string value = 2;
  optional .apphosting.FacetRefinement.Range range = 3;
}

message SearchParams {
  enum CursorType {
    NONE = 0;
    SINGLE = 1;
    PER_RESULT = 2;
  }
  enum ParsingMode {
    STRICT = 0;
    RELAXED = 1;
  }
  required .apphosting.IndexSpec index_spec = 1;
  required string query = 2;
  optional string cursor = 4;
  optional int32 offset = 11;
  optional .apphosting.SearchParams.CursorType cursor_type = 5 [default = NONE];
  optional int32 limit = 6 [default = 20];
  optional int32 matched_count_accuracy = 7;
  repeated .apphosting.SortSpec sort_spec = 8;
  optional .apphosting.ScorerSpec scorer_spec = 9;
  optional .apphosting.FieldSpec field_spec = 10;
  optional bool keys_only = 12;
  optional .apphosting.SearchParams.ParsingMode parsing_mode = 13 [default = STRICT];
  optional int32 auto_discover_facet_count = 15 [default = 0];
  repeated .apphosting.FacetRequest include_facet = 16;
  repeated .apphosting.FacetRefinement facet_refinement = 17;
  optional .apphosting.FacetAutoDetectParam facet_auto_detect_param = 18;
  optional int32 facet_depth = 19 [default = 1000];
  optional bool enable_query_rewrite = 20 [default = false];
}

message SearchRequest {
  required .apphosting.SearchParams params = 1;
  optional bytes app_id = 3;
}

message FacetResultValue {
  required string name = 1;
  required int32 count = 2;
  required .apphosting.FacetRefinement refinement = 3;
}

message FacetResult {
  required string name = 1;
  repeated .apphosting.FacetResultValue value = 2;
}

message SearchResult {
  required .storage_onestore_v3.Document document = 1;
  repeated .storage_onestore_v3.Field expression = 4;
  repeated double score = 2;
  optional string cursor = 3;
}

message SearchResponse {
  repeated .apphosting.SearchResult result = 1;
  required int64 matched_count = 2;
  required .apphosting.RequestStatus status = 3;
  optional string cursor = 4;
  repeated .apphosting.FacetResult facet_result = 5;
  optional int32 docs_scored = 6;
  extensions 1000 to 9999;
}

service SearchService {
  rpc IndexDocument(.apphosting.IndexDocumentRequest) returns (.apphosting.IndexDocumentResponse);
  rpc DeleteDocument(.apphosting.DeleteDocumentRequest) returns (.apphosting.DeleteDocumentResponse);
  rpc ListDocuments(.apphosting.ListDocumentsRequest) returns (.apphosting.ListDocumentsResponse);
  rpc ListIndexes(.apphosting.ListIndexesRequest) returns (.apphosting.ListIndexesResponse);
  rpc Search(.apphosting.SearchRequest) returns (.apphosting.SearchResponse);
  rpc DeleteSchema(.apphosting.DeleteSchemaRequest) returns (.apphosting.DeleteSchemaResponse);
}

