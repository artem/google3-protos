syntax = "proto2";

package apphosting;

option java_package = "com.google.appengine.api.memcache";
option java_outer_classname = "MemcacheServicePb";
option java_generic_services = true;

message MemcacheServiceError {
  enum ErrorCode {
    OK = 0;
    UNSPECIFIED_ERROR = 1;
    NAMESPACE_NOT_SET = 2;
    PERMISSION_DENIED = 3;
    INVALID_VALUE = 6;
    UNAVAILABLE = 9;
  }
}

message AppOverride {
  required string app_id = 1;
}

message MemcacheGetRequest {
  repeated bytes key = 1;
  optional string name_space = 2 [default = ""];
  optional bool for_cas = 4;
  optional .apphosting.AppOverride override = 5;
}

message MemcacheGetResponse {
  enum GetStatusCode {
    HIT = 1;
    MISS = 2;
    TRUNCATED = 3;
    DEADLINE_EXCEEDED = 4;
    UNREACHABLE = 5;
    OTHER_ERROR = 6;
  }
  repeated group Item = 1 {
    required bytes key = 2;
    required bytes value = 3;
    optional fixed32 flags = 4;
    optional fixed64 cas_id = 5;
    optional int32 expires_in_seconds = 6;
  }
  repeated .apphosting.MemcacheGetResponse.GetStatusCode get_status = 7;
}

message MemcacheSetRequest {
  enum SetPolicy {
    SET = 1;
    ADD = 2;
    REPLACE = 3;
    CAS = 4;
  }
  repeated group Item = 1 {
    required bytes key = 2;
    required bytes value = 3;
    optional fixed32 flags = 4;
    optional .apphosting.MemcacheSetRequest.SetPolicy set_policy = 5 [default = SET];
    optional fixed32 expiration_time = 6 [default = 0];
    optional fixed64 cas_id = 8;
    optional bool for_cas = 9;
  }
  optional string name_space = 7 [default = ""];
  optional .apphosting.AppOverride override = 10;
}

message MemcacheSetResponse {
  enum SetStatusCode {
    STORED = 1;
    NOT_STORED = 2;
    ERROR = 3;
    EXISTS = 4;
    DEADLINE_EXCEEDED = 5;
    UNREACHABLE = 6;
    OTHER_ERROR = 7;
  }
  repeated .apphosting.MemcacheSetResponse.SetStatusCode set_status = 1;
}

message MemcacheDeleteRequest {
  repeated group Item = 1 {
    required bytes key = 2;
    optional fixed32 delete_time = 3 [default = 0];
  }
  optional string name_space = 4 [default = ""];
  optional .apphosting.AppOverride override = 5;
}

message MemcacheDeleteResponse {
  enum DeleteStatusCode {
    DELETED = 1;
    NOT_FOUND = 2;
    DEADLINE_EXCEEDED = 3;
    UNREACHABLE = 4;
    OTHER_ERROR = 5;
  }
  repeated .apphosting.MemcacheDeleteResponse.DeleteStatusCode delete_status = 1;
}

message MemcacheIncrementRequest {
  enum Direction {
    INCREMENT = 1;
    DECREMENT = 2;
  }
  required bytes key = 1;
  optional string name_space = 4 [default = ""];
  optional uint64 delta = 2 [default = 1];
  optional .apphosting.MemcacheIncrementRequest.Direction direction = 3 [default = INCREMENT];
  optional uint64 initial_value = 5;
  optional fixed32 initial_flags = 6;
  optional .apphosting.AppOverride override = 7;
}

message MemcacheIncrementResponse {
  enum IncrementStatusCode {
    OK = 1;
    NOT_CHANGED = 2;
    ERROR = 3;
    DEADLINE_EXCEEDED = 4;
    UNREACHABLE = 5;
    OTHER_ERROR = 6;
  }
  optional uint64 new_value = 1;
  optional .apphosting.MemcacheIncrementResponse.IncrementStatusCode increment_status = 2;
}

message MemcacheBatchIncrementRequest {
  optional string name_space = 1 [default = ""];
  repeated .apphosting.MemcacheIncrementRequest item = 2;
  optional .apphosting.AppOverride override = 3;
}

message MemcacheBatchIncrementResponse {
  repeated .apphosting.MemcacheIncrementResponse item = 1;
}

message MemcacheFlushRequest {
  optional .apphosting.AppOverride override = 1;
}

message MemcacheFlushResponse {
}

message MemcacheStatsRequest {
  optional .apphosting.AppOverride override = 1;
  optional int32 max_hotkey_count = 2 [default = 0];
}

message MergedNamespaceStats {
  required uint64 hits = 1;
  required uint64 misses = 2;
  required uint64 byte_hits = 3;
  required uint64 items = 4;
  required uint64 bytes = 5;
  required fixed32 oldest_item_age = 6;
  repeated .apphosting.MemcacheHotKey hotkeys = 7;
}

message MemcacheHotKey {
  required bytes key = 1;
  required double qps = 2;
  optional string name_space = 3;
}

message MemcacheStatsResponse {
  optional .apphosting.MergedNamespaceStats stats = 1;
}

service MemcacheService {
  rpc Get(.apphosting.MemcacheGetRequest) returns (.apphosting.MemcacheGetResponse);
  rpc Set(.apphosting.MemcacheSetRequest) returns (.apphosting.MemcacheSetResponse);
  rpc Delete(.apphosting.MemcacheDeleteRequest) returns (.apphosting.MemcacheDeleteResponse);
  rpc Increment(.apphosting.MemcacheIncrementRequest) returns (.apphosting.MemcacheIncrementResponse);
  rpc BatchIncrement(.apphosting.MemcacheBatchIncrementRequest) returns (.apphosting.MemcacheBatchIncrementResponse);
  rpc FlushAll(.apphosting.MemcacheFlushRequest) returns (.apphosting.MemcacheFlushResponse);
  rpc Stats(.apphosting.MemcacheStatsRequest) returns (.apphosting.MemcacheStatsResponse);
}

