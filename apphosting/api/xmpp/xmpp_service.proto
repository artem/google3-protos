syntax = "proto2";

import "apphosting/api/api_base.proto";
import "apphosting/api/channel/channel_service.proto";
package apphosting;

option java_package = "com.google.appengine.api.xmpp";
option java_outer_classname = "XMPPServicePb";

message XmppServiceError {
  enum ErrorCode {
    UNSPECIFIED_ERROR = 1;
    INVALID_JID = 2;
    NO_BODY = 3;
    INVALID_XML = 4;
    INVALID_TYPE = 5;
    INVALID_SHOW = 6;
    EXCEEDED_MAX_SIZE = 7;
    APPID_ALIAS_REQUIRED = 8;
    NONDEFAULT_MODULE = 9;
  }
}

message PresenceRequest {
  required string jid = 1;
  optional string from_jid = 2;
}

message PresenceResponse {
  enum SHOW {
    NORMAL = 0;
    AWAY = 1;
    DO_NOT_DISTURB = 2;
    CHAT = 3;
    EXTENDED_AWAY = 4;
  }
  required bool is_available = 1;
  optional .apphosting.PresenceResponse.SHOW presence = 2;
  optional bool valid = 3;
}

message BulkPresenceRequest {
  repeated string jid = 1;
  optional string from_jid = 2;
}

message BulkPresenceResponse {
  repeated .apphosting.PresenceResponse presence_response = 1;
}

message XmppMessageRequest {
  repeated string jid = 1;
  required string body = 2;
  optional bool raw_xml = 3 [default = false];
  optional string type = 4 [default = "chat"];
  optional string from_jid = 5;
}

message XmppMessageResponse {
  enum XmppMessageStatus {
    NO_ERROR = 0;
    INVALID_JID = 1;
    OTHER_ERROR = 2;
    INVALID_XML = 3;
    INVALID_TYPE = 4;
  }
  repeated .apphosting.XmppMessageResponse.XmppMessageStatus status = 1;
}

message XmppSendPresenceRequest {
  required string jid = 1;
  optional string type = 2;
  optional string show = 3;
  optional string status = 4;
  optional string from_jid = 5;
}

message XmppSendPresenceResponse {
}

message XmppInviteRequest {
  required string jid = 1;
  optional string from_jid = 2;
}

message XmppInviteResponse {
}

service XmppService {
  rpc GetPresence(.apphosting.PresenceRequest) returns (.apphosting.PresenceResponse);
  rpc BulkGetPresence(.apphosting.BulkPresenceRequest) returns (.apphosting.BulkPresenceResponse);
  rpc SendMessage(.apphosting.XmppMessageRequest) returns (.apphosting.XmppMessageResponse);
  rpc SendInvite(.apphosting.XmppInviteRequest) returns (.apphosting.XmppInviteResponse);
  rpc SendPresence(.apphosting.XmppSendPresenceRequest) returns (.apphosting.XmppSendPresenceResponse);
  rpc CreateChannel(.apphosting.CreateChannelRequest) returns (.apphosting.CreateChannelResponse);
  rpc SendChannelMessage(.apphosting.SendMessageRequest) returns (.apphosting.base.VoidProto);
}

