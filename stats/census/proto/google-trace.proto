syntax = "editions";

package stats_census;

import "google/protobuf/timestamp.proto";
import "stats/census/proto/google-rpc-status.proto";

option java_multiple_files = true;
option java_outer_classname = "GoogleTraceProto";
option java_package = "com.google.tracing";

message TraceId {
    optional string hex_encoded = 1;
}

message Module {
    optional string module = 1;
    optional string build_id = 2;
}

message StackTrace {
    repeated StackFrame stack_frame = 1;
    message StackFrame {
        optional string function_name = 1;
        optional string orig_function_name = 2;
        optional string file_name = 3;
        optional int64 line_number = 4;
        optional int64 column_number = 5;
        optional Module load_module = 6;
        optional string source_version = 7;
    }
    
    optional uint64 stack_trace_hash_id = 2;
}

message LabelValue {
    oneof value {
        string string_value = 1;
        int64 int_value = 2;
        bool bool_value = 3;
    }
}

message Span {
    optional fixed64 id = 1;
    optional string name = 2;
    optional fixed64 parent_id = 3;
    optional google.protobuf.Timestamp local_start_time = 4;
    optional google.protobuf.Timestamp local_end_time = 5;
    map<string, LabelValue> labels = 6;
    optional StackTrace stack_trace = 7;
    
    repeated TimeEvent time_events = 8;
    message TimeEvent {
        optional google.protobuf.Timestamp local_time = 1;
        
        oneof value {
            Annotation annotation = 2;
            NetworkEvent network_event = 3;
        }
        
        message Annotation {
            optional string description = 1;
            map<string, LabelValue> labels = 2;
        }
        
        message NetworkEvent {
            optional google.protobuf.Timestamp kernel_time = 1;
            
            optional Type type = 2;
            enum Type {
                UNSPECIFIED = 0;
                SENT = 1;
                RECV = 2;
            }
            
            optional uint64 message_id = 3;
            optional uint64 message_size = 4;
        }
    }
    
    repeated Link links = 9;
    message Link {
        optional TraceId trace_id = 1;
        optional fixed64 span_id = 2;
        
        optional Type type = 3;
        enum Type {
            UNSPECIFIED = 0;
            CHILD = 1;
            PARENT = 2;
        }
    }
    
    optional Status status = 10;
    optional bool has_remote_parent = 11;
}

message Trace {
    optional TraceId trace_id = 1;
    repeated Span spans = 2;
}
