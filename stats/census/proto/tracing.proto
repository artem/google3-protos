syntax = "editions";

package stats_census.tracing;

import "stats/census/proto/view.proto";
import "util/task/status.proto";

message Op {
    optional fixed64 trace_id = 1;
    optional double start_time = 2;
    optional double stop_time = 4;
    optional double end_time = 3;
    
    repeated Annotation annotations = 6;
    message Annotation {
        optional double timestamp = 1;
        optional string value = 2;
        optional int32 thread_id = 3;
    }
    
    repeated Tag tags = 7;
    message Tag {
        optional string key = 1;
        optional string value = 2;
    }
    
    repeated Link links = 8;
    message Link {
        optional Type type = 1;
        enum Type {
            UNKNOWN = 0;
            PARENT = 1;
            CHILD = 2;
        }
        
        optional double timestamp = 2;
        optional fixed64 trace_id = 5;
        optional fixed64 op_id = 3;
        
        optional Peer peer = 4;
        message Peer {
            
        }
        
        optional int32 thread_id = 6;
    }
    
    optional fixed64 op_id = 10;
    optional util.StatusProto error = 11;
}

message Condition {
    optional string resource = 1;
    optional string measure = 2;
    optional double measure_lower_bound = 3;
    optional double measure_upper_bound = 4;
    repeated TagSelectorProto tag_filters = 5;
    optional bool for_sampled_traces = 6;
}

message Trigger {
    optional string trigger_id = 1;
    optional double expiration_timestamp = 2;
    optional double rate_per_second = 3;
    optional Condition condition = 4;
}

message TracezRequest {
    repeated CollectByTraceId trace_ids_requests = 2;
    message CollectByTraceId {
        optional string id = 1;
        repeated fixed64 trace_ids = 2;
    }
    
    repeated CollectConditionalTraces condition_requests = 3;
    message CollectConditionalTraces {
        optional string id = 1;
        optional Condition condition = 2;
        optional int32 max_ops_to_return = 3;
        optional double start_time = 5;
        optional double end_time = 6;
        optional bool active = 7;
    }
    
    repeated Trigger install_triggers = 4;
    repeated string remove_triggers = 5;
    
    repeated CollectOpsForTrigger collect_ops_for_trigger_request = 6;
    message CollectOpsForTrigger {
        optional string id = 1;
        optional double ops_horizon_timestamp = 2;
    }
    
    reserved 1;
}

message TracezResponse {
    repeated TriggeredTraces triggered = 1;
    message TriggeredTraces {
        optional string id = 1;
        
        repeated Trace traces = 4;
        message Trace {
            optional fixed64 trace_id = 1;
            optional fixed64 op_id = 2;
            optional double start_time = 3;
            optional double end_time = 4;
        }
        
        reserved 2, 3;
    }
    
    repeated CollectedTraces collected = 2;
    message CollectedTraces {
        optional string id = 1;
        repeated Op ops = 2;
        optional util.StatusProto status = 3;
    }
    
    repeated util.StatusProto trigger_install_status = 3;
    repeated util.StatusProto trigger_remove_status = 4;
    
    optional RequestStats stats = 5;
    message RequestStats {
        optional double trace_data_horizon_timestamp = 1;
        optional fixed64 process_id = 2;
    }
    
    reserved 10;
}
