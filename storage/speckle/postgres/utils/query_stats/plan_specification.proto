syntax = "editions";

package storage.speckle.postgres.utils.query_stats;

import "storage/datapol/annotations/proto/semantic_annotations.proto";

message RelOptId {
    optional string alias = 1;
    optional int32 relid = 2;
    optional int32 scan_relid = 3;
}

message GatherOptSpec {
    optional GatherType gather_type = 1;
    enum GatherType {
        UNKNOWN = 0;
        GATHER = 1;
        GATHER_MERGE = 2;
    }
    
    optional int32 parallel_workers = 2;
    optional bool single_copy = 3;
    optional bool is_final = 4;
    optional OrderByStrategy sort_strategy = 5;
}

message BitmapScanOptSpec {
    optional BitmapType bitmap_type = 1;
    enum BitmapType {
        UNKNOWN = 0;
        BITMAP_AND = 1;
        BITMAP_OR = 2;
        BITMAP_INDEX = 3;
    }
    
    optional string index_name = 2;
    repeated BitmapScanOptSpec bitmap_scan_opt_specs = 3;
}

message ScanOptSpec {
    optional RelOptId rel_opt_id = 1;
    
    optional ScanType scan_type = 2;
    enum ScanType {
        UNKNOWN = 0;
        SEQ_SCAN = 1;
        INDEX_SCAN = 2;
        BITMAP_HEAP_SCAN = 3;
        TID_SCAN = 4;
        INDEX_ONLY_SCAN = 5;
        CTE_SCAN = 6;
        SUBQUERY_SCAN = 7;
    }
    
    repeated string index_names = 3;
    optional GatherOptSpec gather_spec = 4;
    optional bool has_partial_sort_step = 5;
    repeated RelOptId parameterized_rel_opt_ids = 6;
    optional BitmapScanOptSpec bitmap_scan_opt_spec = 7;
}

message ColumnarScanSpec {
    optional RelOptId rel_opt_id = 1;
    optional int32 scan_mode = 2;
}

message HybridScanOptSpec {
    optional ColumnarScanSpec columnar_scan_spec = 1;
    optional ScanOptSpec row_store_scan_spec = 2;
    optional GatherOptSpec gather_spec = 3;
    optional bool has_partial_sort_step = 4;
}

message ParallelSpec {
    optional bool parallel_aware = 1;
    optional bool parallel_safe = 2;
    optional int32 parallel_workers = 3;
}

message JoinOptSpec {
    repeated RelOptId outer_rel_opt_ids = 1;
    repeated RelOptId inner_rel_opt_ids = 2;
    
    optional JoinType join_type = 3;
    enum JoinType {
        UNKNOWN = 0;
        HASH_JOIN = 1;
        MERGE_JOIN = 2;
        NEST_LOOP_JOIN = 3;
    }
    
    optional bool is_inner_memoize = 4;
    optional GatherOptSpec gather_spec = 5;
    optional ParallelSpec inner_parallel_spec = 6;
    optional bool has_partial_sort_step = 7;
    optional bool is_inner_material = 8;
    optional bool is_inner_unique = 9;
    optional bool is_outer_unique = 10;
}

message JoinCardStat {
    repeated RelOptId outer_rel_opt_ids = 1;
    repeated RelOptId inner_rel_opt_ids = 2;
    repeated RelOptId rel_opt_ids = 4;
    optional double cardinality = 3;
}

message QOStats {
    repeated JoinCardStat join_card_stats = 1;
}

message DistinctOptSpec {
    optional bool is_unique_path = 1;
    optional bool is_hash_path = 2;
}

message GroupingSetOptSpec {
    optional AggStrategy agg_strategy = 1;
    optional AggSplit agg_split = 2;
    optional OrderByStrategy sort_strategy = 3;
    
    repeated GroupClause group_clauses = 4;
    message GroupClause {
        repeated int32 group_clause_index = 1;
    }
}

message GroupingOptSpec {
    optional GroupingSetOptSpec final_agg_spec = 1;
    repeated GroupingSetOptSpec grouping_set_specs = 2;
    optional GatherOptSpec gather_spec = 3;
    optional bool is_minmax_agg = 4;
}

message PartialGroupingOptSpec {
    optional GroupingSetOptSpec final_agg_spec = 1;
    optional GatherOptSpec gather_spec = 2;
}

message OrderByOptSpec {
    optional OrderByStrategy strategy = 1;
    optional GatherOptSpec gather_spec = 2;
}

message WindowAggOptSpec {
    optional OrderByStrategy strategy = 1;
}

message WindowOptSpec {
    repeated WindowAggOptSpec window_agg_specs = 1;
}

message SubQueryOptSpec {
    repeated ScanOptSpec scan_opt_specs = 1;
    repeated JoinOptSpec join_opt_specs = 2;
    optional DistinctOptSpec distinct_opt_spec = 3;
    optional GroupingOptSpec grouping_opt_spec = 4;
    optional OrderByOptSpec order_by_opt_spec = 5;
    repeated HybridScanOptSpec hybrid_scan_opt_specs = 6;
    optional WindowOptSpec window_opt_spec = 7;
    optional PartialGroupingOptSpec partial_grouping_opt_spec = 8;
    optional bool is_minmaxagg_init_plan = 9;
    optional string subqueryscan_alias = 10;
    repeated SubQueryOptSpec subqueryscan_opt_specs = 11;
    optional bool is_init_plan = 12;
}

message GucValues {
    map<string, string> modified_gucs = 1;
}

message QueryOptSpec {
    repeated SubQueryOptSpec sub_query_opt_specs = 1;
    optional uint64 logical_query_id = 2;
    optional uint64 plan_id = 3;
    optional GucValues guc_values = 4;
}

enum AggStrategy {
    AGG_STRATEGY_UNKNOWN = 0;
    AGG_STRATEGY_PLAIN = 1;
    AGG_STRATEGY_SORT = 2;
    AGG_STRATEGY_HASH = 3;
    AGG_STRATEGY_MIXED = 4;
    AGG_STRATEGY_GROUP = 5;
}

enum AggSplit {
    AGG_SPLIT_UNKNOWN = 0;
}

enum OrderByStrategy {
    ORDER_BY_STRATEGY_UNKNOWN = 0;
    ORDER_BY_STRATEGY_SORT = 1;
    ORDER_BY_STRATEGY_INCREMENTAL_SORT = 2;
}
